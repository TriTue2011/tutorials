blueprint:
  name: Voice - Advanced YouTube Search Tool
  author: VuLQ
  description: >-
    # Tools for searching YouTube videos using for LLM

    ## Blueprint Setup

    ### Required

    * Pyscript integration must be installed from HACS.

    * YouTube Search Tool script must be installed.

    * A YouTube API key.

    ### Optional

    * Adjust the prompts for each field used in the script.
    The descriptions guide the LLM to provide the correct input.

    ### Note

    * Provide a concise and precise description for the script.
    This description will enable the LLM to recognize that
    the script is designed to search videos from YouTube.

    * Make sure to expose the script to Assist after the script has been saved.

  domain: script
  homeassistant:
    min_version: 2024.10.0
  input:
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description:
        You can use these settings to finetune the prompts for your specific
        LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        query_string_prompt:
          name: Query string prompt
          description:
            The prompt which will be used for the LLM can provide the search string for the query.
          selector:
            text:
              multiline: true
              multiple: false
          default: >-
            This argument is mandatory and must always be provided!

            Provide the search string to query list of videos.

            If the query contains misspellings caused by bilingual usage or proper names,
            it should be corrected to the most likely accurate query,
            and the user should be asked for confirmation before proceeding with the query.

            After obtaining the result, ask to play the video on the TV.
            Do not include the Media ID in your response.
mode: parallel
max_exceeded: silent
fields:
  query_string:
    name: Query string
    description: !input query_string_prompt
    selector:
        text:
    required: true
sequence:
  - variables:
      query_string: "{{ query_string | default }}"
  - alias: Check if variables were set correctly
    if:
      - condition: template
        value_template: "{{ not query_string }}"
    then:
      - alias: Set variable for error message
        variables:
          response:
            error:
              Unable to search for videos because the query string is empty.
      - alias: Stop the script
        stop: Unable to search for videos because the query string is empty.
        response_variable: response
  - action: pyscript.youtube_search_tool
    response_variable: response
    data:
      query: "{{ query_string }}"
      search_type: "video"
      results: 5
  - variables:
      response:
        entries: >-
          {% for entry in response.get('items') if entry.id.kind == 'youtube#video' -%}
          - channel: {{ entry.snippet.channelTitle | title }}
            title: {{ entry.snippet.title | title }}
            published: {{ strptime(entry.snippet.publishedAt, '%Y-%m-%dT%H:%M:%S%z') | relative_time }} ago
            media_id: {{ entry.id.videoId }}
          {% endfor -%}
        error: >-
          {{ response.error if response.get('error') }}
  - stop: ""
    response_variable: response
