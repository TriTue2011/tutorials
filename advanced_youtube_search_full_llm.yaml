blueprint:
  name: Voice - Advanced YouTube Search Tool
  author: VuLQ
  description: >-
    # Tool for searching YouTube videos using LLM

    ## Blueprint Setup

    ### Required

    * Pyscript integration needs to be installed from HACS.

    * The youtube_data_tool.py script needs to be copied into the pyscript folder.

    * The requirements.txt file needs to be copied into the pyscript folder.

    * A YouTube API key needs to be configured in configuration.yaml.

    ```

    #File configuration.yaml

    pyscript:
      allow_all_imports: true
      hass_is_global: true
      youtube_api_key: !secret youtube_api_key

    ```

    ### Optional

    * Adjust the prompts for each field used in the script.
    The descriptions guide the LLM to provide the correct input.

    ### Note

    * Provide a concise and precise description for the script.
    This description will enable the LLM to recognize that
    the script is designed to search videos from YouTube.

    * Make sure to expose the script to Assist after the script has been saved.

  domain: script
  homeassistant:
    min_version: 2024.10.0
  input:
    results_settings:
      name: Settings for Results
      icon: mdi:youtube
      description: These settings allow you to define the maximum number of results that will return for each request.
      input:
        results:
          name: Number Of Results
          selector:
            number:
              min: 0
              max: 50
              step: 1
          default: 5
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description:
        You can use these settings to finetune the prompts for your specific
        LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        query_string_prompt:
          name: Query String Prompt
          description:
            The prompt which will be used for the LLM can provide the search string for the query.
          selector:
            text:
              multiline: true
              multiple: false
          default: >-
            This argument is mandatory and must always be provided!

            Provide the search string to query list of videos.

            If a query includes misreading caused by user mispronunciation,
            it should be corrected to the most likely accurate search string,
            and the user should be asked for confirmation before proceeding with the query.

            After obtaining the result, ask to play the video on the TV.
            Add an ordinal number to each video to make selection easier.
            Do not include the Media ID in your response.
        page_token_prompt:
          name: Page Token Prompt
          description:
            The prompt which will be used for the LLM can provide
            the page token to get additional videos that could be retrieved.
          selector:
            text:
              multiline: true
              multiple: false
          default: >-
            This argument is optional.

            Provide the page token to retrieve additional videos.

            Use it when the initial query results are unsatisfying, and the user wants to find more videos.
mode: parallel
max_exceeded: silent
fields:
  query_string:
    name: Query String
    description: !input query_string_prompt
    selector:
        text:
    required: true
  page_token:
    name: Page Token
    description: !input page_token_prompt
    selector:
        text:
sequence:
  - variables:
      results: !input results
      query_string: "{{ query_string | default }}"
      page_token: "{{ page_token | default }}"
  - alias: Check if variables were set correctly
    if:
      - condition: template
        value_template: "{{ not query_string }}"
    then:
      - alias: Set variable for error message
        variables:
          response:
            error:
              Unable to search for videos because the query string is empty.
      - alias: Stop the script
        stop: Unable to search for videos because the query string is empty.
        response_variable: response
  - action: pyscript.youtube_search_tool
    response_variable: response
    data:
      query: "{{ query_string }}"
      search_type: "video"
      results: "{{ results }}"
      page_token: "{{ page_token }}"
  - if:
      - condition: template
        value_template: "{{ response.get('error') }}"
    then:
      - variables:
          response:
            error: "{{ response.error }}"
    else:
      - variables:
          response:
            entries: >-
              {% for entry in response.get('items') if entry.id.kind == 'youtube#video' -%}
              - channel: {{ entry.snippet.channelTitle | lower }}
                title: {{ entry.snippet.title | lower }}
                published: {{ strptime(entry.snippet.publishedAt, '%Y-%m-%dT%H:%M:%S%z') | relative_time }} ago
                media_id: {{ entry.id.videoId }}
              {% endfor -%}
            next_page_token: "{{ response.get('nextPageToken') }}"
  - stop: ""
    response_variable: response
