blueprint:
  name: Voice - Calendar Events Lookup Tool
  author: VuLQ
  description: |
    # Tool gets events from calendar using for LLM

    ## Blueprint Setup

    ### Required

    * Set one or more calendar entities for which you want to get the events.

    ### Optional

    * Adjust the prompts for each field used in the script. The descriptions guide
    the LLM to provide the correct input.

    ### Note

    * Give the script a clear description. This will be used by LLM to understand
    it should use this script to get events from selected calendars.

    * Make sure to expose the script to Assist after the script has been saved.
  domain: script
  homeassistant:
    min_version: 2024.10.0
  input:
    calendar_entities:
      name: Calendar entities
      description: Select the calendar entities to fetch the events from.
      selector:
        entity:
          filter:
            domain: calendar
          multiple: true
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description:
        You can use these settings to finetune the prompts for your specific
        LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        time_period_type_prompt:
          name: Time period type prompt
          description:
            The prompt which will be used for the LLM can provide
            the type for the period (days or hours).
          selector:
            text:
              multiline: true
              multiple: false
          default: >-
            This argument is mandatory and must always be provided!

            Use 'daily' for requests covering full days or periods longer than one day.
            Use 'hourly' for requests covering part of a day or a specific start hour.

            After obtaining the result, ensure your responses include the event's day of the week and start date.
            Include the start time only if the event does not begin at 12 a.m. midnight.
            The specified end date or time of the event is exclusive.
        time_period_length_prompt:
          name: Time period length prompt
          description:
            The prompt which will be used for the LLM can provide the length of the period.
          selector:
            text:
              multiline: true
              multiple: false
          default: >-
            This argument is mandatory and must always be provided!

            The length of the period. This will be measured in days if
            'time_period_type' is 'daily', and in hours if 'time_period_type' is 'hourly'.

            Examples: 1 (day) for today's events, 2 (days) for weekend events,
            7 (days) for the next few days, 30 (days) for in the month,
            6 (hours) for morning, afternoon, or evening events.
        date_prompt:
          name: Date prompt
          description:
            The prompt which will be used for the LLM can provide the start date for the events period.
          selector:
            text:
              multiline: true
              multiple: false
          default: >-
            This argument is mandatory and must always be provided!

            Provide the date for the requested period starts. Use the format YYYY-MM-DD.

            Always include a date with each request. If the request does not specify a date,
            you should provide today's date. Examples of dates that can be used
            include today, this week, this month, etc.

            When the requested period is for the night, do not use today's date but
            always use the next day, unless the current time is still before 05:00:00
        time_prompt:
          name: Time prompt
          description:
            The prompt which will be used for the LLM can provide the start time for the events period.
          selector:
            text:
              multiline: true
              multiple: false
          default: >-
            This argument is mandatory and must always be provided!

            Provide the start time in HH:MM:SS format.
            Always provide time. For a full day, use 00:00:00.
            For the current hour, use the start of the hour.
            Night starts at 00:00:00, morning starts at 06:00:00,
            afternoon starts at 12:00:00 and evening starts at 18:00:00
mode: parallel
max_exceeded: silent
fields:
  time_period_type:
    name: Time Period Type
    description: !input time_period_type_prompt
    selector:
      select:
        options:
          - daily
          - hourly
    required: true
  time_period_length:
    name: Time Period Length
    description: !input time_period_length_prompt
    selector:
      number:
        min: 1
        max: 48
    required: true
  start_date:
    name: Start Date
    description: !input date_prompt
    selector:
      date:
    required: true
  start_time:
    name: Start Time
    description: !input time_prompt
    selector:
      time:
    required: true
sequence:
  - variables:
      start_date: "{{ start_date | as_datetime(default='') }}"
      start_time: "{{ start_time | default('00:00:00') | as_timedelta | default('00:00:00', true) }}"
      start: >-
        {{ ((start_date | as_datetime + as_timedelta(start_time)) | as_local) if start_date else 'n/a' }}
      end: >-
        {% if start != 'n/a' %}
        {% set start = as_datetime(start) %}
        {% set add = time_period_length | default(1) | abs %}
        {% set type = time_period_type if (time_period_type | default) in ['daily', 'hourly'] else 'daily' %}
        {{ (start + timedelta(days = add if type == 'daily' else 0, hours = add if type == 'hourly' else 0)) | as_local }}
        {% endif %}
  - alias: Check if variables were set correctly
    if:
      - condition: template
        value_template: "{{ start == 'n/a' or end | as_datetime < now() }}"
    then:
      - alias: Set variable for eror message
        variables:
          response:
            error:
              Unable to provide calendar events because parameters were set incorrectly.
      - alias: Stop the script
        stop: Unable to provide calendar events because parameters were set incorrectly.
        response_variable: response
  - action: calendar.get_events
    target:
      entity_id: !input calendar_entities
    response_variable: response
    data:
      start_date_time: "{{ start }}"
      end_date_time: "{{ end }}"
  - variables:
      result:
        events: >-
          {{
            response.values()
              | map(attribute='events')
              | sum(start=[])
              | sort(attribute=start)
          }}
  - stop: ""
    response_variable: result
