blueprint:
  name: Voice - Create Calendar Event
  author: luuquangvu
  description: >-
    # Tool help to create calendar events used for Voice Assistant

    ## Blueprint Setup

    ### Required

    * A calendar entity with write permissions to save events.

    ### Optional

    * Adjust the prompts for each field used in the script. The descriptions guide the LLM to provide the correct input.

    ### Note

    * Google Calendar requires Read/Write access.

    * Provide a concise and precise description for the script. This will be utilized by the LLM to understand it should use this script for creating calendar events.

    * Make sure to expose the script to Assist after the script has been saved.

    * Do not alter the default script name.
  domain: script
  homeassistant:
    min_version: 2024.10.0
  input:
    calendar_settings:
      name: Settings for Calendar
      icon: mdi:calendar
      description: You can use these settings to configure a Calendar.
      input:
        calendar:
          name: Calendar
          selector:
            entity:
              filter:
                - domain: calendar
    custom_settings:
      name: Custom Settings
      icon: mdi:tools
      description: You can use these settings to configure the maximum number of simultaneous processes to run at a time.
      collapsed: true
      input:
        simultaneous:
          name: Simultaneous Processes
          selector:
            number:
              min: 10
              max: 50
          default: 30
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description: You can use these settings to finetune the prompts for your specific LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        summary_prompt:
          name: Summary Prompt
          description: The prompt which will be used for the LLM can provide the short summary or subject for the event.
          selector:
            text:
              multiline: true
          default: >-
            This argument is mandatory and must always be provided.

            It defines the short summary or subject of the event.
        description_prompt:
          name: Description Prompt
          description: The prompt which will be used for the LLM can provide a more complete description of the event than the one provided by the summary.
          selector:
            text:
              multiline: true
          default: >-
            This argument is optional.

            It provides a more complete description of the event than the summary.
        start_date_time_prompt:
          name: Start Time Prompt
          description: The prompt which will be used for the LLM can provide the date and time the event should start.
          selector:
            text:
              multiline: true
          default: >-
            Use either the start_date_time parameter or the start_date parameter, but not both.

            This argument specifies the event start date and time in the format YYYY-MM-DD HH:MM:SS.

            Only populate start_date_time when the request includes a time-of-day (e.g., 10:00, 18:30, morning/afternoon/evening). Otherwise use start_date.

            When using start_date_time (timed events), you must also provide end_date_time. Do not provide end_date.

            If the user does not specify an end time, you must still provide end_date_time = start_date_time + 2 hours. Do not ask clarifying questions.
        end_date_time_prompt:
          name: End Time Prompt
          description: The prompt which will be used for the LLM can provide the date and time the event should end.
          selector:
            text:
              multiline: true
          default: >-
            Use either the end_date_time parameter or the end_date parameter, but not both.

            This argument specifies the event end date and time in the format YYYY-MM-DD HH:MM:SS.

            For timed events, you must provide end_date_time and it must be on or after start_date_time.

            Do not provide end_date when start_date_time is used.

            If the user did not specify an end time, infer and provide end_date_time = start_date_time + 2 hours. Do not ask clarifying questions.
        start_date_prompt:
          name: Start Date Prompt
          description: The prompt which will be used for the LLM can provide the date the all-day event should start.
          selector:
            text:
              multiline: true
          default: >-
            Use either the start_date parameter or the start_date_time parameter, but not both.

            This argument specifies the start date of an all-day event in the format YYYY-MM-DD.

            Use start_date for date-only requests (no time-of-day mentioned).

            When using start_date (all-day events), you must also provide end_date. Do not provide end_date_time.

            If the user does not specify an end date, you must still provide end_date = start_date + 1 day. Do not ask clarifying questions.
        end_date_prompt:
          name: End Date Prompt
          description: The prompt which will be used for the LLM can provide the date the all-day event should end.
          selector:
            text:
              multiline: true
          default: >-
            Use either the end_date parameter or the end_date_time parameter, but not both.

            This argument specifies the end date of an all-day event in the format YYYY-MM-DD.

            For all-day events, you must provide end_date and it must be on or after start_date.

            Do not provide end_date_time when start_date is used.

            If the user did not specify an end date, infer and provide end_date = start_date + 1 day. Do not ask clarifying questions.
mode: queued
max: !input simultaneous
max_exceeded: silent
variables:
  version: 20250923
fields:
  summary:
    selector:
      text:
    name: Summary
    required: true
    description: !input summary_prompt
  description:
    selector:
      text:
        multiline: true
    name: Description
    description: !input description_prompt
  start_date_time:
    selector:
      datetime:
    name: Start Date Time
    description: !input start_date_time_prompt
  end_date_time:
    selector:
      datetime:
    name: End Date Time
    description: !input end_date_time_prompt
  start_date:
    selector:
      date:
    name: Start Date
    description: !input start_date_prompt
  end_date:
    selector:
      date:
    name: End Date
    description: !input end_date_prompt
sequence:
  - variables:
      summary: "{{ summary | default('') | trim }}"
      description: "{{ description | default('') | trim }}"
      start_date_time: "{{ start_date_time | default('') | trim }}"
      end_date_time: "{{ end_date_time | default('') | trim }}"
      start_date: "{{ start_date | default('') | trim }}"
      end_date: "{{ end_date | default('') | trim }}"
      calendar: !input calendar
  - alias: Check if variables were set correctly
    if:
      - condition: template
        value_template: >-
          {{ (not summary) or (not start_date_time and not start_date) }}
    then:
      - alias: Set variable for error message
        variables:
          response:
            error: The event could not be added due to invalid or misconfigured input parameters.
      - alias: Stop the script
        stop: The event could not be added due to invalid or misconfigured input parameters.
        response_variable: response
  - alias: Verify whether the calendar entity has write permissions.
    if:
      - condition: template
        value_template: >-
          {% set feats = (state_attr(calendar, 'supported_features') | int(0)) -%}
          {{ (feats % 2) != 1 }}
    then:
      - alias: Set variable for error message
        variables:
          response:
            error: The event could not be added because the calendar entity lacks write permissions.
      - alias: Stop the script
        stop: The event could not be added because the calendar entity lacks write permissions.
        response_variable: response
  - alias: Validate ambiguous start inputs
    if:
      - condition: template
        value_template: >-
          {{ (start_date_time | default('') | trim != '') and (start_date | default('') | trim != '') }}
    then:
      - alias: Set variable for error message
        variables:
          response:
            error: >-
              Please provide only one start parameter: either start_date_time (timed) or start_date (all-day), not both.
      - alias: Stop the script
        stop: >-
          Please provide only one start parameter: either start_date_time (timed) or start_date (all-day), not both.
        response_variable: response
  - alias: Validate end inputs for timed start
    if:
      - condition: template
        value_template: >-
          {{ (start_date_time | default('') | trim != '') and (end_date_time | default('') | trim == '') }}
    then:
      - variables:
          response:
            error: For timed events, end_date_time is required and must be provided.
      - stop: For timed events, end_date_time is required and must be provided.
        response_variable: response
  - alias: Validate end inputs for all-day start
    if:
      - condition: template
        value_template: >-
          {{ (start_date | default('') | trim != '') and (end_date | default('') | trim == '') }}
    then:
      - variables:
          response:
            error: For all-day events, end_date is required and must be provided.
      - stop: For all-day events, end_date is required and must be provided.
        response_variable: response
  - alias: Disallow type mismatch for timed start
    if:
      - condition: template
        value_template: >-
          {{ (start_date_time | default('') | trim != '') and (end_date | default('') | trim != '') }}
    then:
      - variables:
          response:
            error: >-
              Do not mix types: timed start requires end_date_time, not end_date.
      - stop: >-
          Do not mix types: timed start requires end_date_time, not end_date.
        response_variable: response
  - alias: Disallow type mismatch for all-day start
    if:
      - condition: template
        value_template: >-
          {{ (start_date | default('') | trim != '') and (end_date_time | default('') | trim != '') }}
    then:
      - variables:
          response:
            error: >-
              Do not mix types: all-day start requires end_date, not end_date_time.
      - stop: >-
          Do not mix types: all-day start requires end_date, not end_date_time.
        response_variable: response
  - alias: Validate end after start for timed
    if:
      - condition: template
        value_template: >-
          {{ (start_date_time | as_datetime) is datetime and (end_date_time | as_datetime) is datetime and (end_date_time | as_datetime) < (start_date_time | as_datetime) }}
    then:
      - variables:
          response:
            error: end_date_time must be on or after start_date_time.
      - stop: end_date_time must be on or after start_date_time.
        response_variable: response
  - alias: Validate end after start for all-day
    if:
      - condition: template
        value_template: >-
          {{ (start_date | as_datetime) is datetime and (end_date | as_datetime) is datetime and ((end_date | as_datetime).date()) < ((start_date | as_datetime).date()) }}
    then:
      - variables:
          response:
            error: end_date must be on or after start_date.
      - stop: end_date must be on or after start_date.
        response_variable: response
  - choose:
      - alias: Timed event (requires end_date_time)
        conditions:
          - condition: template
            value_template: >-
              {{ (start_date_time | as_datetime) is datetime and (end_date_time | as_datetime) is datetime }}
        sequence:
          - action: calendar.create_event
            target:
              entity_id: !input calendar
            data:
              summary: "{{ summary }}"
              description: "{{ description }}"
              start_date_time: "{{ (start_date_time | as_datetime | as_local).isoformat() }}"
              end_date_time: "{{ (end_date_time | as_datetime | as_local).isoformat() }}"
          - alias: Return success message (timed)
            variables:
              response:
                message: >-
                  Event created: {{ summary }} ({{ (start_date_time | as_datetime).strftime('%Y-%m-%d %H:%M') }} to {{ (end_date_time | as_datetime).strftime('%Y-%m-%d %H:%M') }}) in {{ state_attr(calendar, 'friendly_name') or calendar }}.
          - stop: ""
            response_variable: response
      - alias: All-day event (requires end_date)
        conditions:
          - condition: template
            value_template: >-
              {{ (start_date | as_datetime) is datetime and (end_date | as_datetime) is datetime }}
        sequence:
          - action: calendar.create_event
            target:
              entity_id: !input calendar
            data:
              summary: "{{ summary }}"
              description: "{{ description }}"
              start_date: "{{ (start_date | as_datetime | as_local).date() }}"
              end_date: "{{ (end_date | as_datetime | as_local).date() }}"
          - alias: Return success message (all-day)
            variables:
              response:
                message: >-
                  Event created: {{ summary }} ({{ (start_date | as_datetime).date() }} to {{ (end_date | as_datetime).date() }}) in {{ state_attr(calendar, 'friendly_name') or calendar }}.
          - stop: ""
            response_variable: response
    default:
      - alias: Invalid date configuration
        variables:
          response:
            error: >-
              Invalid date configuration. Provide either start_date_time + end_date_time (timed) or start_date + end_date (all-day), and ensure end is on/after start.
      - stop: Invalid date configuration
        response_variable: response
