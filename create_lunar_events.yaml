blueprint:
  name: Create Lunar Events
  author: VuLQ
  description: >-
    # Tool help to create Lunar calendar events

    ## Blueprint Setup

    ### Required

    * The Pyscript integration needs to be installed from HACS.

    * The `date_conversion_tool.py` script needs to be copied into the pyscript folder.

    * A Local Calendar or a Google Calendar entity to save events.

    ### Note

    * Support Local Calendar and Google Calendar Integration entries only.

    * Google Calendar must have Read/Write access.
  domain: script
  homeassistant:
    min_version: 2024.10.0
  input:
    calendar_settings:
      name: Settings for Calendar
      icon: mdi:calendar
      description: You can use these settings to configure a Calendar.
      input:
        calendar:
          name: Calendar
          selector:
            entity:
              filter:
                - domain: calendar
                  # An option to select only the calendar entity can create events,
                  # but it is currently deactivated due to a parsing error bug in the Home Assistant frontend.
                  # supported_features:
                  #   - calendar.CalendarEntityFeature.CREATE_EVENT
              multiple: false
mode: single
max_exceeded: silent
fields:
  lunar_date:
    selector:
      date:
    required: true
    name: Lunar Date
    description: Choose the start Lunar date of the event.
  days:
    selector:
      number:
        min: 1
        max: 30
        step: 1
    name: Days
    default: 1
    description: Choose the duration of the event.
  event_summary:
    selector:
      text:
    name: Event Summary
    required: true
    description: The summary of the event.
  event_description:
    selector:
      text:
        multiple: false
        multiline: true
    name: Event Description
    description: More details about the event.
  repeat:
    selector:
      number:
        min: 1
        max: 30
        step: 1
    name: Repeat
    default: 1
    description: Select the number of years the event will repeat.
  leap_month:
    name: Leap Month
    description: When the event is in the leap month. The script will force Repeat to 1 which means no repeat.
    selector:
      boolean:
sequence:
  - variables:
      version: 20250825
      lunar_date: "{{ lunar_date | as_datetime(default='') }}"
      start_date: "{{ as_datetime(lunar_date).date() if lunar_date else 'n/a' }}"
      days: "{{ days | default(1) | abs }}"
      event_summary: "{{ event_summary | default }}"
      event_description: "{{ event_description | default }}"
      repeat: "{{ repeat | default(1) | abs }}"
      leap_month: "{{ leap_month | default(false) }}"
      calendar: !input calendar
  - alias: Check if variables were set correctly
    if:
      - condition: template
        value_template: >-
          {{ start_date == 'n/a'
            or not event_summary
            or calendar not in (integration_entities('local_calendar') + integration_entities('google'))
          }}
    then:
      - alias: Stop the script
        stop: Unable to add the event because either the Lunar date or event summary is empty or the calendar entity is invalid.
        error: true
  - alias: Verify the leap month
    if:
      - condition: template
        value_template: "{{ leap_month }}"
    then:
      - variables:
          repeat: 1
  - alias: Choose the action
    choose:
      - conditions:
          - condition: template
            value_template: "{{ calendar in integration_entities('local_calendar') }}"
        sequence:
          - variables:
              create_event: calendar.create_event
      - conditions:
          - condition: template
            value_template: "{{ calendar in integration_entities('google') }}"
        sequence:
          - variables:
              create_event: google.create_event
              delay_milliseconds: 200
  - repeat:
      sequence:
        - action: pyscript.date_conversion_tool
          data:
            conversion_type: l2s
            date: "{{ start_date }}"
            leap_month: "{{ leap_month }}"
          response_variable: response
        - variables:
            solar_date: >-
              {{ response.date if (response is defined and response.get('date')) }}
        - action: "{{ create_event }}"
          data:
            summary: "{{ event_summary }}"
            description: "{{ event_description }}"
            start_date: "{{ solar_date }}"
            end_date: >-
              {{ (as_datetime(solar_date) + timedelta(days=days)).date() }}
          target:
            entity_id: !input calendar
        - variables:
            start_date: >-
              {{ as_datetime(start_date).replace(year=as_datetime(start_date).year + 1).date() }}
        - alias: Add a small delay when creating Google Calendar events.
          if:
            - condition: template
              value_template: "{{ delay_milliseconds is defined }}"
          then:
            - delay:
                hours: 0
                minutes: 0
                seconds: 0
                milliseconds: "{{ delay_milliseconds }}"
      count: "{{ repeat }}"
