blueprint:
  name: Voice - Fan Oscillation Control Tool
  author: VuLQ
  description: >-
    # Tool for Controlling Fan Oscillation using LLM

    ## Blueprint Setup

    ### Required

    * A smart fan integrated into Home Assistant.

    * A template sensor stored all information about entity aliases.

    ### Optional

    * Adjust the prompts for each field used in the script.
    The descriptions guide the LLM to provide the correct input.

    ### Note

    * Provide a concise and precise description for the script.
    This will be utilized by the LLM to understand it should
    use this script for controlling oscillation of a smart fan.

    * Make sure to expose the script to Assist after the script has been saved.

  domain: script
  homeassistant:
    min_version: 2024.10.0
  input:
    entity_aliases_settings:
      name: Settings for Entity Aliases
      icon: mdi:format-list-bulleted
      description: You can use these settings to configure a template sensor that stores all information about entity aliases.
      input:
        entity_aliases:
          name: Entity Aliases
          selector:
            entity:
              filter:
                - domain: sensor
                  integration: template
              multiple: false
          default:
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description:
        You can use these settings to finetune the prompts for your specific
        LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        fan_entities_prompt:
          name: Fan Entities Prompt
          description:
            The prompt which will be used for the LLM can provide the name of fans for controlling.
          selector:
            text:
              multiline: true
              multiple: false
          default: >-
            This argument is mandatory and must always be provided!

            Provide at least one fan's name to control.

            When requesting multiple fans, make sure to separate each fan's name with a semicolon.
        oscillating_prompt:
          name: Oscillating Prompt
          description:
            The prompt which will be used for the LLM can provide the oscillation state.
          selector:
            text:
              multiline: true
              multiple: false
          default: >-
            This argument is mandatory and must always be provided!

            The oscillation state of the fan that you want to set.

            It can only be one of the two following values:
            'true' for turns oscillation on, 'false' for turns oscillation off.
mode: parallel
max_exceeded: silent
fields:
  fan_entities:
    name: Fan Entities
    description: !input fan_entities_prompt
    selector:
        text:
    required: true
  oscillating:
    name: Oscillating
    description: !input oscillating_prompt
    selector:
      boolean:
    required: true
sequence:
  - variables:
      entity_aliases: !input entity_aliases
      fan_entities: "{{ fan_entities | default }}"
      oscillating: "{{ oscillating | default(false) }}"
  - alias: Check if variables were set correctly
    if:
      - condition: template
        value_template: >-
          {% set validation = namespace(existed=false) -%}
          {% for entity in fan_entities.split(';') -%}
          {% if (states.fan | selectattr('attributes.friendly_name', '==', entity.strip()) | list) -%}
          {% set validation.existed = true -%}
          {% endif -%}
          {% if (state_attr(entity_aliases, 'entities') | selectattr('entity_id', 'match', 'fan\.') | selectattr('aliases', 'contains', entity.strip()) | list) -%}
          {% set validation.existed = true -%}
          {% endif -%}
          {% endfor -%}
          {{ not validation.existed }}
    then:
      - alias: Set variable for error message
        variables:
          response:
            error:
              Unable to control the fan because the fan name is either incorrect or does not exist.
      - alias: Stop the script
        stop: Unable to control the fan because the fan name is either incorrect or does not exist.
        response_variable: response
  - variables:
      devices: >-
        {% set device = namespace(entities=[]) -%}
        {% for entity in fan_entities.split(';') -%}
        {% if (states.fan | selectattr('attributes.friendly_name', '==', entity.strip()) | list) -%}
        {% set device.entities = device.entities + (states.fan | selectattr('attributes.friendly_name', '==', entity.strip()) | map(attribute='entity_id') | list) -%}
        {% else -%}
        {% set device.entities = device.entities + (state_attr(entity_aliases, 'entities') | selectattr('entity_id', 'match', 'fan\.') | selectattr('aliases', 'contains', entity.strip()) | map(attribute='entity_id') | list) -%}
        {% endif -%}
        {% endfor -%}
        {{ device.entities }}
  - action: fan.oscillate
    target:
      entity_id: "{{ devices | join(', ') }}"
    data:
      oscillating: "{{ oscillating }}"
