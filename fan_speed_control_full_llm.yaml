blueprint:
  name: Voice - Set Fan Speed
  author: VuLQ
  description: >-
    # Tool for Controlling Fan Speed used for Voice Assistant

    ## Blueprint Setup

    ### Required

    * A smart fan integrated into Home Assistant.

    * A template sensor stores all information about entity aliases needs to be configured in `config/configuration.yaml`.

    ```

    #File configuration.yaml

    shell_command:
      get_entity_alias: jq '[.data.entities[] | select(.options.conversation.should_expose == true and (.aliases | length > 0)) | {entity_id, aliases}]' ./.storage/core.entity_registry
    template:
      - trigger:
          - platform: homeassistant
            event: start
          - trigger: event
            event_type: event_template_reloaded
        action:
          - action: shell_command.get_entity_alias
            response_variable: response
        sensor:
          - name: "Assist: Entity IDs and Aliases"
            unique_id: entity_ids_and_aliases
            icon: mdi:format-list-bulleted
            device_class: timestamp
            state: "{{ now().isoformat() }}"
            attributes:
              entities: "{{ response.stdout }}"

    ```

    ### Optional

    * Adjust the prompts for each field used in the script. The descriptions guide the LLM to provide the correct input.

    ### Note

    * Provide a concise and precise description for the script. This will be utilized by the LLM to understand it should use this script for controlling speed of a smart fan.

    * Make sure to expose the script to Assist after the script has been saved.

    * Do not alter the default script name.
  domain: script
  homeassistant:
    min_version: 2024.10.0
  input:
    entity_aliases_settings:
      name: Settings for Entity Aliases
      icon: mdi:format-list-bulleted
      description: You can use these settings to configure a template sensor that stores all information about entity aliases.
      input:
        entity_aliases:
          name: Entity Aliases
          selector:
            entity:
              filter:
                - domain: sensor
                  integration: template
    speed_steps_settings:
      name: Settings for Speed Steps
      icon: mdi:fan-auto
      description: These settings allow you to define the minimum number of speed steps for each request. They only apply to fans with 100 speed levels.
      collapsed: true
      input:
        speed_steps:
          name: Speed Steps
          selector:
            number:
              min: 5
              max: 25
              step: 5
          default: 20
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description: You can use these settings to finetune the prompts for your specific LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        fan_entities_prompt:
          name: Fan Entities Prompt
          description: The prompt which will be used for the LLM can provide the name of fans for controlling.
          selector:
            text:
              multiline: true
          default: >-
            This argument is mandatory and must always be provided.

            Specify at least one fan's name to control.

            To control multiple fans, separate each fan name with a semicolon.
        speed_adjustment_prompt:
          name: Speed Adjustment Prompt
          description: The prompt which will be used for the LLM can provide speed adjustment.
          selector:
            text:
              multiline: true
          default: >-
            Use this argument to increase or decrease the fan's speed.

            You must provide this parameter only when the 'percentage' parameter is not provided.

            Values: 'true' means increase (e.g., increase/turn up/higher), 'false' means decrease (e.g., decrease/turn down/lower).

            Do not provide both 'speed_adjustment' and 'percentage'. If the user specifies a target like 50%, prefer 'percentage' and omit 'speed_adjustment'. Do not ask clarifying questions.
        percentage_prompt:
          name: Percentage Prompt
          description: The prompt which will be used for the LLM can provide the speed percentage.
          selector:
            text:
              multiline: true
          default: >-
            Use this argument to set the fan's speed to a specific percentage. Accepted range: 1-100.

            You must provide this parameter only when the 'speed_adjustment' parameter is not provided.

            Map qualitative levels when specified: min=1, low=25, medium=50, high=75, max=100. If the user provides an exact value (e.g., 60%), use that value.

            Do not provide both 'percentage' and 'speed_adjustment'. Prefer 'percentage' when the user provides an explicit target. Do not ask clarifying questions.
mode: parallel
max_exceeded: silent
variables:
  version: 20250923
fields:
  fan_entities:
    name: Fan Entities
    description: !input fan_entities_prompt
    selector:
        text:
    required: true
  speed_adjustment:
    name: Speed Adjustment
    description: !input speed_adjustment_prompt
    selector:
      boolean:
  percentage:
    name: Percentage
    description: !input percentage_prompt
    selector:
      number:
        min: 1
        max: 100
        step: 1
sequence:
  - variables:
      entity_aliases: !input entity_aliases
      speed_steps: !input speed_steps
      fan_entities: "{{ fan_entities | default('') | trim }}"
      speed_adjustment: "{{ speed_adjustment | default(none) }}"
      percentage: "{{ percentage | default(0) }}"
  - alias: Check if variables were set correctly
    if:
      - condition: template
        value_template: >-
          {% set validation = namespace(invalid=false) -%}
          {% for entity in fan_entities.split(';') -%}
          {% if not ((states.fan | selectattr('attributes.friendly_name', '==', entity.strip()) | list) or
          (state_attr(entity_aliases, 'entities') | default([]) | selectattr('entity_id', 'match', 'fan\.') | selectattr('aliases', 'contains', entity.strip()) | list)) -%}
          {% set validation.invalid = true -%}
          {% endif -%}
          {% endfor -%}
          {% set pct = percentage | int(0) -%}
          {% set has_pct = pct >= 1 -%}
          {% set has_adj = speed_adjustment is boolean -%}
          {% if pct > 100 -%}
          {% set validation.invalid = true -%}
          {% endif -%}
          {% if (not has_pct) and (not has_adj) -%}
          {% set validation.invalid = true -%}
          {% endif -%}
          {% if has_pct and has_adj -%}
          {% set validation.invalid = true -%}
          {% endif -%}
          {{ validation.invalid }}
    then:
      - alias: Set variable for error message
        variables:
          response:
            error: >-
              Unable to control the fan. Provide valid fan names and exactly one of: percentage (1-100) or speed_adjustment (true/false).
      - alias: Stop the script
        stop: >-
          Unable to control the fan. Provide valid fan names and exactly one of: percentage (1-100) or speed_adjustment (true/false).
        response_variable: response
  - variables:
      devices: >-
        {% set device = namespace(entities=[]) -%}
        {% for entity in fan_entities.split(';') -%}
        {% if (states.fan | selectattr('attributes.friendly_name', '==', entity.strip()) | list) -%}
        {% set device.entities = device.entities + (states.fan | selectattr('attributes.friendly_name', '==', entity.strip()) | map(attribute='entity_id') | list) -%}
        {% else -%}
        {% set device.entities = device.entities + (state_attr(entity_aliases, 'entities') | default([]) | selectattr('entity_id', 'match', 'fan\.') | selectattr('aliases', 'contains', entity.strip()) | map(attribute='entity_id') | list) -%}
        {% endif -%}
        {% endfor -%}
        {{ device.entities }}
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ (percentage | int) >= 1 }}"
        sequence:
          - repeat:
              count: "{{ devices | length }}"
              sequence:
                - action: fan.set_percentage
                  target:
                    entity_id: "{{ devices[repeat.index - 1] }}"
                  data:
                    percentage: >-
                      {% if (percentage | int) > (state_attr(devices[repeat.index - 1], 'percentage_step') | int(1)) -%}
                      {{ percentage | int }}
                      {% else -%}
                      {{ state_attr(devices[repeat.index - 1], 'percentage_step') | int(1) }}
                      {% endif -%}
      - conditions:
          - condition: template
            value_template: "{{ (speed_adjustment is boolean) and (speed_adjustment == true) }}"
        sequence:
          - repeat:
              count: "{{ devices | length }}"
              sequence:
                - action: fan.increase_speed
                  target:
                    entity_id: "{{ devices[repeat.index - 1] }}"
                  data:
                    percentage_step: >-
                      {{ (state_attr(devices[repeat.index - 1], 'percentage_step') | int(1)) if (state_attr(devices[repeat.index - 1], 'percentage_step') | int(1)) > 1 else speed_steps }}
      - conditions:
          - condition: template
            value_template: "{{ (speed_adjustment is boolean) and (speed_adjustment == false) }}"
        sequence:
          - repeat:
              count: "{{ devices | length }}"
              sequence:
                - action: fan.decrease_speed
                  target:
                    entity_id: "{{ devices[repeat.index - 1] }}"
                  data:
                    percentage_step: >-
                      {{ (state_attr(devices[repeat.index - 1], 'percentage_step') | int(1)) if (state_attr(devices[repeat.index - 1], 'percentage_step') | int(1)) > 1 else speed_steps }}
