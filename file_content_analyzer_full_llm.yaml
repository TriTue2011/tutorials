blueprint:
  name: Voice - File Content Analyzer
  author: luuquangvu
  description: >-
    # Tool designed to analyze and extract all types of information from media and document files

    ## Blueprint Setup

    ### Required

    * An AI Task entity must be created and configured in the System - General settings.

    ### Optional

    * Adjust the prompts for each field used in the script. The descriptions guide the LLM to provide the correct input.

    ### Note

    * Provide a concise and precise description for the script. This description will enable the LLM to recognize that the script is designed to extract data from a media or document file.

    * Make sure to expose the script to Assist after the script has been saved.

    * Do not alter the default script name.
  domain: script
  homeassistant:
    min_version: 2025.8.0
  input:
    ai_task_settings:
      name: Settings for AI Task
      icon: mdi:robot-outline
      description: These settings allow you to set up the AI Task responsible for handling the analyzer task.
      collapsed: true
      input:
        ai_task_entity:
          name: AI Task Entity
          description: If left empty, the system will use the default settings under System - General.
          selector:
            entity:
              filter:
                domain: ai_task
          default:
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description: You can use these settings to finetune the prompts for your specific LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        instructions_prompt:
          name: Instructions Prompt
          description: The prompt which will be used for the LLM can provide the request for the query.
          selector:
            text:
              multiline: true
          default: >-
            This argument is mandatory and must always be provided.

            The tool can analyze content and extract any type of information from an image, video, audio, or document, including text, numbers, objects, speech, and visual features.

            Always clearly specify exactly what data should be extracted.
        media_path_prompt:
          name: Media Path Prompt
          description: The prompt which will be used for the LLM can provide the media path for the query.
          selector:
            text:
              multiline: true
          default: >-
            This argument is mandatory and must always be provided.

            Always provide a media path that starts with `local/` (for example `local/snapshots/latest.jpg` or `local/documents/report.pdf`).
        mime_type_prompt:
          name: MIME Type Prompt
          description: The prompt which will be used for the LLM can provide the MIME type of media for the query.
          selector:
            text:
              multiline: true
          default: >-
            This argument is mandatory and must always be provided.

            Always specify the MIME type of the media.
            Choose a value that matches the file contents (for example image/jpeg, video/mp4, audio/mp3, text/plain, or application/pdf).
mode: parallel
max_exceeded: silent
variables:
  version: 20251019
fields:
  instructions:
    name: Instructions
    description: !input instructions_prompt
    selector:
      text:
        multiline: true
    required: true
  media_path:
    name: Media Path
    description: !input media_path_prompt
    selector:
      text:
    required: true
  mime_type:
    name: MIME Type
    description: !input mime_type_prompt
    selector:
      text:
    required: true
sequence:
  - variables:
      ai_task_entity: !input ai_task_entity
      instructions: "{{ instructions | default('') | trim }}"
      media_path: "{{ media_path | default('') | trim }}"
      mime_type: "{{ mime_type | default('') | trim }}"
  - if:
      - alias: Check if variables were set correctly
        condition: template
        value_template: "{{ not instructions }}"
    then:
      - alias: Set variable for error message
        variables:
          response:
            error: >-
              Unable to extract data because instructions is missing or incorrect.
      - alias: Stop the script
        stop: >-
          Unable to extract data because instructions is missing or incorrect.
        response_variable: response
  - if:
      - alias: Check if variables were set correctly
        condition: template
        value_template: "{{ (media_path | length == 0) or (not media_path.startswith('local/')) }}"
    then:
      - alias: Set variable for error message
        variables:
          response:
            error: >-
              Unable to extract data because media path is missing or invalid. Provide a path beginning with `local/`, such as `local/folder/file.ext`.
      - alias: Stop the script
        stop: >-
          Unable to extract data because media path is missing or invalid.
        response_variable: response
  - if:
      - alias: Check if variables were set correctly
        condition: template
        value_template: "{{ not mime_type.startswith(('image/', 'video/', 'audio/', 'text/', 'application/')) }}"
    then:
      - alias: Set variable for error message
        variables:
          response:
            error: >-
              Unable to extract data because MIME type is missing or incorrect.
      - alias: Stop the script
        stop: >-
          Unable to extract data because MIME type is missing or incorrect.
        response_variable: response
  - variables:
      attachments:
        media_content_id: media-source://media_source/{{ media_path }}
        media_content_type: "{{ mime_type }}"
  - if:
      - condition: template
        value_template: "{{ not ai_task_entity }}"
    then:
      - action: ai_task.generate_data
        data:
          task_name: Analyze content from a media entity
          instructions: "{{ instructions }}"
          attachments: "{{ attachments }}"
        response_variable: result
    else:
      - action: ai_task.generate_data
        data:
          task_name: Analyze content from a media entity
          instructions: "{{ instructions }}"
          attachments: "{{ attachments }}"
          entity_id: "{{ ai_task_entity }}"
        response_variable: result
  - variables:
      response:
        data: "{{ result.data }}"
  - stop: ""
    response_variable: response
