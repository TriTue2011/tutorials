blueprint:
  name: Voice - Get YouTube Video Info Tool
  author: VuLQ
  description: >-
    # Tool gets YouTube video info using LLM

    ## Blueprint Setup

    ### Required

    * Check out the guide for further details.

    * Feedparser integration needs to be installed from HACS.

    * Expose YouTube Channel entities after created to Assist.

    * Consider adding entity aliases to make them easier to remember if needed.

    * A template sensor stores all information about entity aliases needs to be configured in configuration.yaml.

    ```

    #File configuration.yaml

    shell_command:
      get_entity_alias: jq '[.data.entities[] | select(.options.conversation.should_expose == true and (.aliases | length > 0)) | {entity_id, aliases}]' ./.storage/core.entity_registry
    template:
      - trigger:
          - platform: homeassistant
            event: start
          - trigger: event
            event_type: event_template_reloaded
        action:
          - action: shell_command.get_entity_alias
            data: {}
            response_variable: response
        sensor:
          - name: "Assist: Entity IDs and Aliases"
            unique_id: entity_ids_and_aliases
            icon: mdi:format-list-bulleted
            device_class: timestamp
            state: "{{ now().isoformat() }}"
            attributes:
              entities: "{{ response.stdout }}"

    ```

    ### Optional

    * Adjust the prompts for each field used in the script.
    The descriptions guide the LLM to provide the correct input.

    ### Note

    * The Voice - Play YouTube Video Tool (play_youtube_video_full_llm.yaml) blueprint
    needs to be installed to play YouTube videos on a smart TV.

    * Provide a concise and precise description for the script.
    This description will enable the LLM to recognize that the script is designed to
    retrieve the latest video information from a YouTube channel or multiple channels.

    * Make sure to expose the script to Assist after the script has been saved.

  domain: script
  homeassistant:
    min_version: 2024.10.0
  input:
    entity_aliases_settings:
      name: Settings for Entity Aliases
      icon: mdi:format-list-bulleted
      description: You can use these settings to configure a template sensor that stores all information about entity aliases.
      input:
        entity_aliases:
          name: Entity Aliases
          selector:
            entity:
              filter:
                - domain: sensor
                  integration: template
              multiple: false
          default:
    short_videos_settings:
      name: Settings for Short Videos
      icon: mdi:video-high-definition
      description: >-
        These settings let you choose whether to ignore short videos in the results or include them (Default: Ignored).
      input:
        short_videos:
          name: Short Videos
          selector:
            boolean:
          default: false
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description:
        You can use these settings to finetune the prompts for your specific
        LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        entities_prompt:
          name: Entities Prompt
          description:
            The prompt which will be used for the LLM can provide the YouTube channel name for the query.
          selector:
            text:
              multiline: true
              multiple: false
          default: >-
            This argument is mandatory and must always be provided!

            Provide at least one YouTube channel's name to query video info.

            When requesting multiple YouTube channels,
            make sure to separate each channel's name with a semicolon.

            If a query does not specify a particular channel,
            provide all relevant channels based on the context.

            If a query includes misreading caused by user mispronunciation,
            it should be corrected to the most likely accurate channel name.

            After obtaining the result, ask to play the video on the TV.
            Add an ordinal number to each video to make selection easier.
            Do not include the Media ID in your response.
        period_length_prompt:
          name: Period Length Prompt
          description:
            The prompt which will be used for the LLM can provide the length
            of the period for the query.
          selector:
            text:
              multiline: true
              multiple: false
          default: >-
            This argument is optional. This will be the number of days
            since the date of the videos published until now.

            Default is 3 (days). The minimum is 1 (day). The maximum is 30 (days).
            Today means 1 (day). This week means 7 (days). This month means 30 (days).
mode: parallel
max_exceeded: silent
fields:
  entities:
    name: Entities
    description: !input entities_prompt
    selector:
        text:
    required: true
  period_length:
    name: Period Length
    description: !input period_length_prompt
    selector:
      number:
        min: 1
        max: 30
    default: 3
sequence:
  - variables:
      entity_aliases: !input entity_aliases
      short_videos: "{{ short_videos | default(false) }}"
      entities: "{{ entities | default }}"
      period_length: "{{ period_length | default(3) | abs }}"
  - alias: Check if variables were set correctly
    if:
      - condition: template
        value_template: >-
          {% set validation = namespace(not_exist=false) -%}
          {% for entity in entities.split(';') -%}
          {% if not ((integration_entities('feedparser') | select('is_state_attr', 'friendly_name', entity.strip()) | list) or
          (state_attr(entity_aliases, 'entities') | selectattr('entity_id', 'match', 'sensor\.') | selectattr('aliases', 'contains', entity.strip()) | list)) -%}
          {% set validation.not_exist = true -%}
          {% endif -%}
          {% endfor -%}
          {{ validation.not_exist }}
    then:
      - alias: Set variable for error message
        variables:
          response:
            error:
              Unable to provide video info because the channel name is either incorrect or does not exist.
      - alias: Stop the script
        stop: Unable to provide video info because the channel name is either incorrect or does not exist.
        response_variable: response
  - variables:
      response:
        entries: >-
          {% for entity in entities.split(';') -%}
          {% set entity_id = (integration_entities('feedparser') | select('is_state_attr', 'friendly_name', entity.strip()) | first)
          if (integration_entities('feedparser') | select('is_state_attr', 'friendly_name', entity.strip()) | list)
          else (state_attr(entity_aliases, 'entities') | selectattr('entity_id', 'match', 'sensor\.') | selectattr('aliases', 'contains', entity.strip()) | map(attribute='entity_id') | first) -%}
          {% for entry in state_attr(entity_id, 'entries') if (strptime(entry.published, '%Y-%m-%dT%H:%M:%S%z') > (now() - timedelta(days=period_length))) -%}
          {% if entry.link is not search('\/shorts\/') -%}
          - channel: {{ entry.author | lower }}
            title: {{ entry.title | lower }}
            published: {{ strptime(entry.published, '%Y-%m-%dT%H:%M:%S%z') | relative_time }} ago
            media_id: {{ entry.yt_videoid }}
          {% elif short_videos -%}
          - channel: {{ entry.author | lower }}
            title: {{ entry.title | lower }}
            published: {{ strptime(entry.published, '%Y-%m-%dT%H:%M:%S%z') | relative_time }} ago
            media_id: {{ entry.yt_videoid }}
          {% endif -%}
          {% endfor -%}
          {% endfor -%}
  - stop: ""
    response_variable: response
