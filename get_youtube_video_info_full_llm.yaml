blueprint:
  name: Voice - Get YouTube Video Info Tool
  author: VuLQ
  description: >-
    # Tool gets YouTube video info using for LLM

    ## Blueprint Setup

    ### Required

    * Feedparser Integration.

    * Expose YouTube Channel entities to Assist.

    * Consider adding entity aliases to make them easier to remember if needed.

    * A template sensor stored all information about entity aliases.

    ### Optional

    * Adjust the prompts for each field used in the script.
    The descriptions guide the LLM to provide the correct input.

    ### Note

    * Provide a concise and precise description for the script.
    This description will enable the LLM to recognize that the script is designed to
    retrieve the latest video information from a YouTube channel or multiple channels.

    * Make sure to expose the script to Assist after the script has been saved.

  domain: script
  homeassistant:
    min_version: 2024.10.0
  input:
    entity_aliases_settings:
      name: Settings for Entity Aliases
      icon: mdi:format-list-bulleted
      description: You can use these settings to configure a template sensor that stores all information about entity aliases.
      input:
        entity_aliases:
          name: Entity Aliases
          selector:
            entity:
              filter:
                - domain: sensor
                  integration: template
              multiple: false
          default:
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description:
        You can use these settings to finetune the prompts for your specific
        LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        entities_prompt:
          name: Entities Prompt
          description:
            The prompt which will be used for the LLM can provide the entities for the query.
          selector:
            text:
              multiline: true
              multiple: false
          default: >-
            This argument is mandatory and must always be provided!

            Provide the name of the YouTube channel to query video info.

            When requesting multiple YouTube channels, make sure to separate each channel's name with a semicolon.
            If the request does not specify a channel, you should provide all available channels,
            but only one name is given for each channel.

            After obtaining the result, ask to play the video on the TV.
            Do not include the Media ID in your response.
        period_length_prompt:
          name: Period Length Prompt
          description:
            The prompt which will be used for the LLM can provide the length
            of the period for the query.
          selector:
            text:
              multiline: true
              multiple: false
          default: >-
            This argument is optional. This will be the number of days
            since the date of the videos published until now.

            Default is 3 (days). The minimum is 1 (day). The maximum is 30 (days).
            Today means 1 (day). This week means 7 (days). This month means 30 (days).
mode: parallel
max_exceeded: silent
fields:
  entities:
    name: Entities
    description: !input entities_prompt
    selector:
        text:
    required: true
  period_length:
    name: Period Length
    description: !input period_length_prompt
    selector:
      number:
        min: 1
        max: 30
    default: 3
sequence:
  - variables:
      entity_aliases: !input entity_aliases
      entities: "{{ entities | default }}"
      period_length: "{{ period_length | default(3) | abs }}"
  - alias: Check if variables were set correctly
    if:
      - condition: template
        value_template: >-
          {% set validation = namespace(existed=false) -%}
          {% for entity in entities.split(';') -%}
          {% if (integration_entities('feedparser') | select('is_state_attr', 'friendly_name', entity.strip()) | list) -%}
          {% set validation.existed = true -%}
          {% endif -%}
          {% if (state_attr(entity_aliases, 'entities') | selectattr('entity_id', 'match', 'sensor\.') | selectattr('aliases', 'contains', entity.strip()) | list) -%}
          {% set validation.existed = true -%}
          {% endif -%}
          {% endfor -%}
          {{ not validation.existed }}
    then:
      - alias: Set variable for error message
        variables:
          response:
            error:
              Unable to provide video info because parameters were set incorrectly.
      - alias: Stop the script
        stop: Unable to provide video info because parameters were set incorrectly.
        response_variable: response
  - variables:
      response:
        entries: >-
          {% for entity in entities.split(';') -%}
          {% set entity_id = (integration_entities('feedparser') | select('is_state_attr', 'friendly_name', entity.strip()) | first)
          if (integration_entities('feedparser') | select('is_state_attr', 'friendly_name', entity.strip()) | list)
          else (state_attr(entity_aliases, 'entities') | selectattr('entity_id', 'match', 'sensor\.') | selectattr('aliases', 'contains', entity.strip()) | map(attribute='entity_id') | first) -%}
          {% for entry in state_attr(entity_id, 'entries') if (strptime(entry.published, '%Y-%m-%dT%H:%M:%S%z') > (now() - timedelta(days=period_length))) -%}
          - channel: {{ entry.author | title }}
            title: {{ entry.title | title }}
            published: {{ strptime(entry.published, '%Y-%m-%dT%H:%M:%S%z') | relative_time }} ago
            media_id: {{ entry.yt_videoid }}

          {% endfor -%}
          {% endfor -%}
  - stop: ""
    response_variable: response
