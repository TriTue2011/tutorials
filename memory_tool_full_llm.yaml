blueprint:
  name: Voice - Memory Tool
  author: luuquangvu
  description: >-
    # Universal memory tool used for Voice Assistant

    ## Blueprint Setup

    ### Required

    * The Pyscript integration needs to be installed through HACS and properly configured.

    * The `scripts/memory.py` script needs to be copied into the `config/pyscript` folder.

    * The Memory Tool relies on specific instructions. For complete usage rules and system policies, please refer to `home_assistant_voice_instructions.md`.

    * The mentioned dependency file(s) is/are included in the repository.

    ### Optional

    * Adjust the prompts for each field used in the script. The descriptions guide the LLM to provide the correct input.

    * Check `sensor.memory_result` to quickly view the current status of the Memory Tool.

    ### Note

    * Provide a concise and precise description for the script. This description will enable the LLM to recognize that the script is designed to use as the Assist tool to let the LLM store and retrieve user/household memories reliably.

    * Make sure to expose the script to Assist after the script has been saved.

    * Do not alter the default script name.
  domain: script
  homeassistant:
    min_version: 2024.10.0
  input:
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description: You can use these settings to finetune the prompts for your specific LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        operation_prompt:
          name: Operation Prompt
          description: Instruction shown to the LLM for selecting the operation.
          selector:
            text:
              multiline: true
          default: >-
            Required for every request.

            Choose exactly one operation: set (save/update), get (retrieve), search (find), forget (delete).

            Output exactly one: set|get|search|forget.

            Only fill the fields needed for that operation; leave others empty or default.
        key_prompt:
          name: Key Prompt
          description: Instruction shown to the LLM for providing the key.
          selector:
            text:
              multiline: true
          default: >-
            Required when operation = set|get|forget. Ignored if operation = search.

            Derive a concise key that captures the user's main concept from their original wording, keeping exactly the same language.

            Do not translate, paraphrase, or canonicalize into English or any other language; do not invent synonyms or new terms.

            If the user explicitly selected a candidate key, reuse it exactly.

            Output the key only, no quotes or labels. If unsure, use search instead of inventing a new key.
        value_prompt:
          name: Value Prompt
          description: Instruction shown to the LLM for providing the value.
          selector:
            text:
              multiline: true
          default: >-
            Required only when operation = set.

            Value to store for the key. Output the raw value only, plain text or JSON.

            Do not add quotes, labels, or explanations. This is a tool parameter, not a user-facing reply.
        scope_prompt:
          name: Scope Prompt
          description: Instruction shown to the LLM for choosing the scope.
          selector:
            text:
              multiline: true
          default: >-
            Required only when operation = set.

            Who it applies to: user|household|session. Output one token only. Default = user.
        expiration_days_prompt:
          name: Expiration (days) Prompt
          description: Instruction shown to the LLM for providing expiration.
          selector:
            text:
              multiline: true
          default: >-
            Required only when operation = set.

            Integer days before expiry (0 = forever). Default = 180. Range 0-3650.
        tags_prompt:
          name: Tags Prompt
          description: Instruction shown to the LLM for providing tags.
          selector:
            text:
              multiline: true
          default: >-
            Required only when operation = set.

            Generate a few short, meaningful keywords in the same language as the user's input.

            If no clear keywords exist, use the main user phrase as a single tag.

            If that is not possible, reuse the key.
        force_new_prompt:
          name: Force New Prompt
          description: Instruction shown to the LLM for deciding whether to override duplicate-tag protection.
          selector:
            text:
              multiline: true
          default: >-
            Optional, only used when operation = set.

            Output true only if the user explicitly confirms creating a new entry despite duplicate tags.

            Otherwise output false (default).

            Output exactly: true|false.
        query_prompt:
          name: Query Prompt
          description: Instruction shown to the LLM for providing the search query.
          selector:
            text:
              multiline: true
          default: >-
            Required only when operation = search.

            If the user's input is short, output it unchanged.

            If it is long, keep only the main keywords in the same language.

            Do not translate, paraphrase, or copy the full sentence.

            Output the query only, no quotes or extra text.
        search_limit_prompt:
          name: Search Limit Prompt
          description: Instruction shown to the LLM for providing the search limit.
          selector:
            text:
              multiline: true
          default: >-
            Required only when operation = search.

            Integer 1-50. Default = 5. Output an integer only.
fields:
  operation:
    name: Operation
    description: !input operation_prompt
    default: search
    selector:
      select:
        options:
          - set
          - get
          - search
          - forget
    required: true
  key:
    name: Key
    description: !input key_prompt
    default: ""
    selector:
      text:
  value:
    name: Value
    description: !input value_prompt
    default: ""
    selector:
      text:
  scope:
    name: Scope
    description: !input scope_prompt
    default: user
    selector:
      select:
        options:
          - user
          - household
          - session
  expiration_days:
    name: Expiration (days)
    description: !input expiration_days_prompt
    default: 180
    selector:
      number:
        min: 0
        max: 3650
        mode: box
  tags:
    name: Tags
    description: !input tags_prompt
    default: ""
    selector:
      text:
  force_new:
    name: Force New
    description: !input force_new_prompt
    default: false
    selector:
      boolean:
  query:
    name: Query
    description: !input query_prompt
    default: ""
    selector:
      text:
  search_limit:
    name: Search limit
    description: !input search_limit_prompt
    default: 5
    selector:
      number:
        min: 1
        max: 50
        mode: box
mode: restart
max_exceeded: silent
variables:
  version: 20250923
sequence:
  - variables:
      op: "{{ operation | default('set') }}"
      key_t: "{{ (key | default('')) | trim }}"
      value_t: "{{ (value | default('')) | trim }}"
      query_t: "{{ (query | default('')) | trim }}"
      tags_t: "{{ (tags | default('')) | regex_replace('\\s+', ' ') | trim }}"
      expiration_days_i: "{{ (expiration_days | default(180)) | int(180) }}"
      scope_v: "{{ (scope | default('')) or 'user' }}"
      in_limit: "{{ (search_limit | default(5)) | int(5) }}"
      force_new_s: "{{ 'true' if force_new | default(false) else 'false' }}"
  - choose:
      - conditions: "{{ op == 'set' }}"
        sequence:
          - choose:
              - conditions: "{{ key_t|length > 0 and value_t|length > 0 }}"
                sequence:
                  - action: pyscript.memory_set
                    data:
                      key: "{{ key_t }}"
                      value: "{{ value_t }}"
                      scope: "{{ scope_v }}"
                      expiration_days: "{{ expiration_days_i }}"
                      tags: "{{ tags_t if tags_t|length > 0 else key_t }}"
                      force_new: "{{ force_new_s }}"
                    response_variable: response
            default:
              - variables:
                  response:
                    status: "error"
                    error: "missing_input"
                    message: "Missing 'key' or 'value' for set operation."
                    details:
                      key: "{{ key_t }}"
                      value_present: "{{ value_t|length > 0 }}"
      - conditions: "{{ op == 'get' }}"
        sequence:
          - choose:
              - conditions: "{{ key_t|length > 0 }}"
                sequence:
                  - action: pyscript.memory_get
                    data:
                      key: "{{ key_t }}"
                    response_variable: response
            default:
              - variables:
                  response:
                    status: "error"
                    error: "missing_input"
                    message: "Missing 'key' for get operation."
                    details:
                      key: "{{ key_t }}"
      - conditions: "{{ op == 'search' }}"
        sequence:
          - choose:
              - conditions: "{{ query_t|length > 0 }}"
                sequence:
                  - action: pyscript.memory_search
                    data:
                      query: "{{ query_t }}"
                      limit: "{{ in_limit | int(5) }}"
                    response_variable: response
            default:
              - variables:
                  response:
                    status: "error"
                    error: "missing_input"
                    message: "Missing 'query' for search operation."
                    details:
                      query: "{{ query_t }}"
      - conditions: "{{ op == 'forget' }}"
        sequence:
          - choose:
              - conditions: "{{ key_t|length > 0 }}"
                sequence:
                  - action: pyscript.memory_forget
                    data:
                      key: "{{ key_t }}"
                    response_variable: response
            default:
              - variables:
                  response:
                    status: "error"
                    error: "missing_input"
                    message: "Missing 'key' for forget operation."
                    details:
                      key: "{{ key_t }}"
    default:
      - alias: Return response (invalid)
        variables:
          response:
            status: "error"
            error: "invalid_operation"
            message: "Invalid operation. Use one of: set, get, search, forget."
  - stop: ""
    response_variable: response
