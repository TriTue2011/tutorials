blueprint:
  name: Voice Memory Tool — Local (automation, English, paginated + expired options)
  description: >
    Local voice blueprint for a Memory Tool with strict operation mapping:
    SET->set, GET->get, SEARCH->search, FORGET->forget. Handles duplicate_tags, ambiguous,
    not_found, and expired. Candidate lists are capped to 5; SEARCH supports pagination.
    Backend may truncate candidate values to ≤120 chars; this blueprint also truncates to 60 for clarity.
  domain: automation
  homeassistant:
    min_version: 2024.10.0
  input:
    trigger_settings:
      name: Trigger settings
      icon: mdi:chat
      collapsed: true
      description:
        Settings for the trigger, you can adjust them, or translate them to your own language
      input:
        set_commands:
          name: Set commands
          description: Phrases that trigger SET (save/update).
          default:
            - "save {value} to {key_phrase}"
            - "remember {key_phrase} is {value}"
            - "create note {key_phrase} is {value}"
          selector: { text: { multiple: true } }
        get_commands:
          name: Get/Recall commands
          description: Phrases that trigger GET (retrieve).
          default:
            - "find {key_phrase}"
            - "recall {key_phrase}"
            - "get info {key_phrase}"
          selector: { text: { multiple: true } }
        search_commands:
          name: Search-only commands
          description: Phrases that trigger SEARCH.
          default:
            - "search {key_phrase}"
          selector: { text: { multiple: true } }
        forget_commands:
          name: Forget/Delete commands
          description: Phrases that trigger FORGET (delete).
          default:
            - "delete {key_phrase}"
            - "forget {key_phrase}"
            - "remove {key_phrase}"
          selector: { text: { multiple: true } }
        yes_commands:
          name: Yes / confirm phrases
          default: ["yes","yep","sure","ok","okay","confirm","do it"]
          selector: { text: { multiple: true } }
        no_commands:
          name: No / cancel phrases
          default: ["no","nope","cancel","stop","never mind"]
          selector: { text: { multiple: true } }
        create_new_commands:
          name: Create-new phrases
          description: Explicitly create a new entry despite duplicate tags.
          default: ["create new","new","make new"]
          selector: { text: { multiple: true } }
        cancel_commands:
          name: Cancel phrases (for choice steps)
          default: ["cancel","stop","abort"]
          selector: { text: { multiple: true } }
        refine_commands:
          name: Refine phrases (search refine)
          default: ["refine","filter","narrow"]
          selector: { text: { multiple: true } }
        more_commands:
          name: Show-more phrases (pagination)
          default: ["more","next","show more"]
          selector: { text: { multiple: true } }
        restore_commands:
          name: Restore phrases (reactivate expired entry as-is)
          default: ["restore","reactivate","bring back"]
          selector: { text: { multiple: true } }
        update_commands:
          name: Update phrases (change value before restoring)
          default: ["update","change","edit"]
          selector: { text: { multiple: true } }
    tool_settings:
      name: Tool settings
      icon: mdi:tools
      collapsed: true
      description:
        Settings for the trigger, you can adjust them, or translate them to your own language
      input:
        default_scope:
          name: Default scope
          description: Apply to user | household | session
          default: user
          selector:
            select:
              options: [user, household, session]
              mode: dropdown
        default_expiration_days:
          name: Default expiration (days)
          default: 180
          selector: { number: { min: 0, max: 3650, mode: box } }
        default_search_limit:
          name: Default search fetch limit (1–50, backend fetch)
          default: 20
          selector: { number: { min: 1, max: 50, mode: box } }
        max_list_choices:
          name: Max candidates to list per page (capped to 5)
          default: 5
          selector: { number: { min: 1, max: 5, mode: box } }
        confirm_delete:
          name: Require delete confirmation
          default: true
          selector: { boolean: {} }
        allow_force_new:
          name: Allow force_new on duplicates (user explicitly says create new)
          default: true
          selector: { boolean: {} }
        choice_timeout:
          name: Choice/confirmation timeout (seconds)
          default: 25
          selector: { number: { min: 5, max: 120, mode: slider } }
mode: single
max_exceeded: silent
triggers:
  - id: set
    trigger: conversation
    command: !input set_commands
  - id: get
    trigger: conversation
    command: !input get_commands
  - id: search
    trigger: conversation
    command: !input search_commands
  - id: forget
    trigger: conversation
    command: !input forget_commands
variables:
  key_phrase: "{{ trigger.slots.key_phrase | default('', true) }}"
  value: "{{ trigger.slots.value | default('', true) }}"
  scope: !input default_scope
  exp_days: !input default_expiration_days
  s_limit: !input default_search_limit
  max_choices_cfg: !input max_list_choices
  max_choices: "{{ [max_choices_cfg, 5] | min }}"
  must_confirm_delete: !input confirm_delete
  allow_force_new: !input allow_force_new
  choice_timeout: !input choice_timeout
  yes_cmds: !input yes_commands
  no_cmds: !input no_commands
  create_new_cmds: !input create_new_commands
  cancel_cmds: !input cancel_commands
  refine_cmds: !input refine_commands
  more_cmds: !input more_commands
  restore_cmds: !input restore_commands
  update_cmds: !input update_commands
  num_aliases:
    one: 1
    first: 1
    two: 2
    second: 2
    three: 3
    third: 3
    four: 4
    fourth: 4
    five: 5
    fifth: 5
  key_norm: >
    {% set k = (key_phrase or '') | lower %}
    {% set k = k | regex_replace('[^a-z0-9\\s_]+',' ') %}
    {% set k = k | regex_replace('\\s+',' ') | trim %}
    {% set toks = k.split(' ') %}
    {% set toks = toks | reject('search','^[a-z]*[0-9]+$', ignorecase=True) | list %}
    {% set key2 = toks | join('_') %}
    {{ key2 if key2 else k | replace(' ','_') }}
  tags_auto: >
    {% set phrase = (key_phrase or '') | lower %}
    {% set val = (value or '') | lower %}
    {% set base = (phrase ~ ' ' ~ val).strip() %}
    {{ base if base else (key_norm or 'note') }}
actions:
  - choose:
      - conditions: "{{ trigger.id == 'set' and key_phrase|length > 0 and value|length > 0 }}"
        sequence:
          - service: pyscript.memory_set
            data:
              key: "{{ key_norm if key_norm|length > 0 else (key_phrase | lower | replace(' ','_')) }}"
              value: "{{ value }}"
              scope: "{{ scope }}"
              expiration_days: "{{ exp_days }}"
              tags: "{{ tags_auto }}"
              force_new: false
            response_variable: resp_set
          - choose:
              - conditions: "{{ resp_set.status == 'ok' }}"
                sequence:
                  - set_conversation_response: "Saved {{ resp_set.key or (key_norm or key_phrase) }}."
              - conditions: "{{ resp_set.error == 'duplicate_tags' and (resp_set.matches | length) > 0 }}"
                sequence:
                  - variables:
                      matches: "{{ resp_set.matches[:max_choices] }}"
                  - set_conversation_response: >
                      I found similar entries:
                      {% for m in matches -%}
                      {{ loop.index }}) {{ m.key }} — "{{ (m.value or '') | string | truncate(60, True) }}"
                      {% endfor %}
                      Say a number to update that existing entry, or say "{{ (create_new_cmds[0] if create_new_cmds else 'create new') }}", or "{{ (cancel_cmds[0] if cancel_cmds else 'cancel') }}".
                  - wait_for_trigger:
                      - trigger: conversation
                        command: ["1","one","first"]
                      - trigger: conversation
                        command: ["2","two","second"]
                      - trigger: conversation
                        command: ["3","three","third"]
                      - trigger: conversation
                        command: ["4","four","fourth"]
                      - trigger: conversation
                        command: ["5","five","fifth"]
                      - trigger: conversation
                        command: !input create_new_commands
                      - trigger: conversation
                        command: !input cancel_commands
                    timeout: !input choice_timeout
                  - variables:
                      c: "{{ wait.trigger.sentence if wait.trigger is not none else '' }}"
                      pick_num: >
                        {% if c in ['1','2','3','4','5'] %}{{ c | int }}
                        {% elif c in num_aliases %}{{ num_aliases[c] }}
                        {% else %}0{% endif %}
                  - choose:
                      - conditions: "{{ 1 <= pick_num <= (matches | length) }}"
                        sequence:
                          - variables:
                              chosen_key: "{{ matches[pick_num - 1].key }}"
                          - service: pyscript.memory_set
                            data:
                              key: "{{ chosen_key }}"
                              value: "{{ value }}"
                              scope: "{{ scope }}"
                              expiration_days: "{{ exp_days }}"
                              tags: "{{ tags_auto }}"
                            response_variable: resp_update
                          - choose:
                              - conditions: "{{ resp_update.status == 'ok' }}"
                                sequence:
                                  - set_conversation_response: "Updated {{ chosen_key }}."
                            default:
                              - set_conversation_response: "Unable to update right now."
                      - conditions: "{{ (wait.trigger.sentence if wait.trigger is not none else '') in create_new_cmds and allow_force_new }}"
                        sequence:
                          - service: pyscript.memory_set
                            data:
                              key: "{{ key_norm if key_norm|length > 0 else (key_phrase | lower | replace(' ','_')) }}"
                              value: "{{ value }}"
                              scope: "{{ scope }}"
                              expiration_days: "{{ exp_days }}"
                              tags: "{{ tags_auto }}"
                              force_new: true
                            response_variable: resp_new
                          - choose:
                              - conditions: "{{ resp_new.status == 'ok' }}"
                                sequence:
                                  - set_conversation_response: "Created new entry {{ resp_new.key or (key_norm or key_phrase) }}."
                            default:
                              - set_conversation_response: "Unable to create a new entry right now."
                    default:
                      - set_conversation_response: "Canceled."
            default:
              - set_conversation_response: "I couldn't save due to an error. Would you like to try again?"
      - conditions: "{{ trigger.id == 'get' and key_phrase|length > 0 }}"
        sequence:
          - service: pyscript.memory_get
            data:
              key: "{{ key_norm if key_norm|length > 0 else (key_phrase | lower | replace(' ','_')) }}"
            response_variable: resp_get
          - choose:
              - conditions: "{{ resp_get.status == 'ok' }}"
                sequence:
                  - set_conversation_response: "{{ resp_get.value }}"
              - conditions: "{{ resp_get.error == 'expired' }}"
                sequence:
                  - variables:
                      prev: "{{ resp_get.value | default('', true) }}"
                      kget: "{{ resp_get.key | default(key_norm or key_phrase) }}"
                  - set_conversation_response: >
                      This entry has expired{% if prev %}: "{{ prev | string | truncate(60, True) }}"{% endif %}.
                      Say "{{ (restore_cmds[0] if restore_cmds else 'restore') }}" to reactivate,
                      "{{ (update_cmds[0] if update_cmds else 'update') }}" to change the value first,
                      "{{ (create_new_cmds[0] if create_new_cmds else 'create new') }}" to save as a new entry, or "{{ (cancel_cmds[0] if cancel_cmds else 'cancel') }}".
                  - wait_for_trigger:
                      - trigger: conversation
                        command: !input restore_commands
                      - trigger: conversation
                        command: !input update_commands
                      - trigger: conversation
                        command: !input create_new_commands
                      - trigger: conversation
                        command: !input cancel_commands
                    timeout: !input choice_timeout
                  - choose:
                      - conditions: "{{ (wait.trigger.sentence if wait.trigger is not none else '') in restore_cmds }}"
                        sequence:
                          - service: pyscript.memory_set
                            data:
                              key: "{{ kget }}"
                              value: "{{ resp_get.value }}"
                              scope: "{{ scope }}"
                              expiration_days: "{{ exp_days }}"
                              tags: "{{ resp_get.tags | default('', true) }}"
                            response_variable: resp_restore
                          - choose:
                              - conditions: "{{ resp_restore.status == 'ok' }}"
                                sequence:
                                  - set_conversation_response: "Restored {{ kget }}."
                            default:
                              - set_conversation_response: "Unable to restore right now."
                      - conditions: "{{ (wait.trigger.sentence if wait.trigger is not none else '') in update_cmds }}"
                        sequence:
                          - set_conversation_response: "What is the new value?"
                          - wait_for_trigger:
                              - trigger: conversation
                                command: "{update_value}"
                            timeout: !input choice_timeout
                            continue_on_timeout: false
                          - variables:
                              new_val: "{{ wait.trigger.slots.update_value if wait.trigger is not none else '' }}"
                          - service: pyscript.memory_set
                            data:
                              key: "{{ kget }}"
                              value: "{{ new_val }}"
                              scope: "{{ scope }}"
                              expiration_days: "{{ exp_days }}"
                              tags: "{{ resp_get.tags | default('', true) }}"
                            response_variable: resp_update_exp
                          - choose:
                              - conditions: "{{ resp_update_exp.status == 'ok' }}"
                                sequence:
                                  - set_conversation_response: "Updated and restored {{ kget }}."
                            default:
                              - set_conversation_response: "Unable to update right now."
                      - conditions: "{{ (wait.trigger.sentence if wait.trigger is not none else '') in create_new_cmds and allow_force_new }}"
                        sequence:
                          - variables:
                              new_key: "{{ key_norm if key_norm|length > 0 else (key_phrase | lower | replace(' ','_')) }}"
                          - service: pyscript.memory_set
                            data:
                              key: "{{ new_key }}"
                              value: "{{ resp_get.value }}"
                              scope: "{{ scope }}"
                              expiration_days: "{{ exp_days }}"
                              tags: "{{ resp_get.tags | default('', true) }}"
                              force_new: true
                            response_variable: resp_new_from_exp
                          - choose:
                              - conditions: "{{ resp_new_from_exp.status == 'ok' }}"
                                sequence:
                                  - set_conversation_response: "Created new entry {{ resp_new_from_exp.key or new_key }}."
                            default:
                              - set_conversation_response: "Unable to create a new entry right now."
                    default:
                      - set_conversation_response: "Canceled."
              - conditions: "{{ resp_get.error == 'not_found' and (resp_get.matches | default([], true) | length) == 0 }}"
                sequence:
                  - set_conversation_response: "I couldn't find that entry."
              - conditions: "{{ resp_get.error == 'ambiguous' and (resp_get.matches | length) > 0 }}"
                sequence:
                  - variables:
                      items: "{{ resp_get.matches[:max_choices] }}"
                  - set_conversation_response: >
                      I found a few candidates:
                      {% for it in items -%}
                      {{ loop.index }}) {{ it.key }} — "{{ (it.value or '') | string | truncate(60, True) }}"
                      {% endfor %}
                      Say a number to open it, or say "{{ (cancel_cmds[0] if cancel_cmds else 'cancel') }}".
                  - wait_for_trigger:
                      - trigger: conversation
                        command: ["1","one","first"]
                      - trigger: conversation
                        command: ["2","two","second"]
                      - trigger: conversation
                        command: ["3","three","third"]
                      - trigger: conversation
                        command: ["4","four","fourth"]
                      - trigger: conversation
                        command: ["5","five","fifth"]
                      - trigger: conversation
                        command: !input cancel_commands
                    timeout: !input choice_timeout
                  - variables:
                      c: "{{ wait.trigger.sentence if wait.trigger is not none else '' }}"
                      pick_num: >
                        {% if c in ['1','2','3','4','5'] %}{{ c | int }}
                        {% elif c in num_aliases %}{{ num_aliases[c] }}
                        {% else %}0{% endif %}
                  - choose:
                      - conditions: "{{ 1 <= pick_num <= (items | length) }}"
                        sequence:
                          - variables:
                              chosen_key: "{{ items[pick_num - 1].key }}"
                          - service: pyscript.memory_get
                            data:
                              key: "{{ chosen_key }}"
                            response_variable: resp_getn
                          - choose:
                              - conditions: "{{ resp_getn.status == 'ok' }}"
                                sequence:
                                  - set_conversation_response: "{{ resp_getn.value }}"
                              - conditions: "{{ resp_getn.error == 'expired' }}"
                                sequence:
                                  - variables:
                                      prev2: "{{ resp_getn.value | default('', true) }}"
                                      kget2: "{{ resp_getn.key | default(chosen_key) }}"
                                  - set_conversation_response: >
                                      This entry has expired{% if prev2 %}: "{{ prev2 | string | truncate(60, True) }}"{% endif %}.
                                      Say "{{ (restore_cmds[0] if restore_cmds else 'restore') }}", "{{ (update_cmds[0] if update_cmds else 'update') }}",
                                      "{{ (create_new_cmds[0] if create_new_cmds else 'create new') }}", or "{{ (cancel_cmds[0] if cancel_cmds else 'cancel') }}".
                            default:
                              - set_conversation_response: "I couldn't retrieve it right now."
                    default:
                      - set_conversation_response: "Canceled."
            default:
              - set_conversation_response: "I couldn't retrieve it right now."
      - conditions: "{{ trigger.id == 'search' and key_phrase|length > 0 }}"
        sequence:
          - service: pyscript.memory_search
            data:
              query: "{{ key_phrase }}"
              limit: "{{ s_limit }}"
            response_variable: resp_s
          - choose:
              - conditions: "{{ resp_s.status != 'ok' }}"
                sequence:
                  - set_conversation_response: "Search failed. Please try again later."
              - conditions: "{{ (resp_s.results | length) == 0 }}"
                sequence:
                  - set_conversation_response: "No matching results."
            default:
              - variables:
                  all_items: "{{ resp_s.results }}"
                  page: 0
              - repeat:
                  while:
                    - condition: template
                      value_template: "{{ (all_items | length) > (page * max_choices) }}"
                  sequence:
                    - variables:
                        start_idx: "{{ page * max_choices }}"
                        end_idx: "{{ (start_idx + max_choices) | int }}"
                        page_items: "{{ all_items[start_idx:end_idx] }}"
                    - set_conversation_response: >
                        Results ({{ start_idx + 1 }}–{{ [end_idx, (all_items | length)] | min }} of {{ all_items | length }}):
                        {% for it in page_items -%}
                        {{ loop.index }}) {{ it.key }} — "{{ (it.value or '') | string | truncate(60, True) }}"
                        {% endfor %}
                        Say a number to open it, say "{{ (more_cmds[0] if more_cmds else 'more') }}" for next page,
                        say "{{ (refine_cmds[0] if refine_cmds else 'refine') }}" to add keywords, or say "{{ (cancel_cmds[0] if cancel_cmds else 'cancel') }}".
                    - wait_for_trigger:
                        - trigger: conversation
                          command: ["1","one","first"]
                        - trigger: conversation
                          command: ["2","two","second"]
                        - trigger: conversation
                          command: ["3","three","third"]
                        - trigger: conversation
                          command: ["4","four","fourth"]
                        - trigger: conversation
                          command: ["5","five","fifth"]
                        - trigger: conversation
                          command: !input more_commands
                        - trigger: conversation
                          command: !input refine_commands
                        - trigger: conversation
                          command: !input cancel_commands
                      timeout: !input choice_timeout
                    - variables:
                        c: "{{ wait.trigger.sentence if wait.trigger is not none else '' }}"
                        pick_num: >
                          {% if c in ['1','2','3','4','5'] %}{{ c | int }}
                          {% elif c in num_aliases %}{{ num_aliases[c] }}
                          {% else %}0{% endif %}
                    - choose:
                        - conditions: "{{ 1 <= pick_num <= (page_items | length) }}"
                          sequence:
                            - variables:
                                chosen_key: "{{ page_items[pick_num - 1].key }}"
                            - service: pyscript.memory_get
                              data:
                                key: "{{ chosen_key }}"
                              response_variable: resp_get_from_search
                            - choose:
                                - conditions: "{{ resp_get_from_search.status == 'ok' }}"
                                  sequence:
                                    - set_conversation_response: "{{ resp_get_from_search.value }}"
                                - conditions: "{{ resp_get_from_search.error == 'expired' }}"
                                  sequence:
                                    - variables:
                                        prevs: "{{ resp_get_from_search.value | default('', true) }}"
                                        ksel: "{{ resp_get_from_search.key | default(chosen_key) }}"
                                    - set_conversation_response: >
                                        This entry has expired{% if prevs %}: "{{ prevs | string | truncate(60, True) }}"{% endif %}.
                                        Say "{{ (restore_cmds[0] if restore_cmds else 'restore') }}", "{{ (update_cmds[0] if update_cmds else 'update') }}",
                                        "{{ (create_new_cmds[0] if create_new_cmds else 'create new') }}", or "{{ (cancel_cmds[0] if cancel_cmds else 'cancel') }}".
                                    - wait_for_trigger:
                                        - trigger: conversation
                                          command: !input restore_commands
                                        - trigger: conversation
                                          command: !input update_commands
                                        - trigger: conversation
                                          command: !input create_new_commands
                                        - trigger: conversation
                                          command: !input cancel_commands
                                      timeout: !input choice_timeout
                                    - choose:
                                        - conditions: "{{ (wait.trigger.sentence if wait.trigger is not none else '') in restore_cmds }}"
                                          sequence:
                                            - service: pyscript.memory_set
                                              data:
                                                key: "{{ ksel }}"
                                                value: "{{ resp_get_from_search.value }}"
                                                scope: "{{ scope }}"
                                                expiration_days: "{{ exp_days }}"
                                                tags: "{{ resp_get_from_search.tags | default('', true) }}"
                                              response_variable: resp_restore_search
                                            - choose:
                                                - conditions: "{{ resp_restore_search.status == 'ok' }}"
                                                  sequence:
                                                    - set_conversation_response: "Restored {{ ksel }}."
                                              default:
                                                - set_conversation_response: "Unable to restore right now."
                                        - conditions: "{{ (wait.trigger.sentence if wait.trigger is not none else '') in update_cmds }}"
                                          sequence:
                                            - set_conversation_response: "What is the new value?"
                                            - wait_for_trigger:
                                                - trigger: conversation
                                                  command: "{update_value_search}"
                                              timeout: !input choice_timeout
                                              continue_on_timeout: false
                                            - variables:
                                                new_val: "{{ trigger.slots.update_value_search if wait.trigger is not none else '' }}"
                                            - service: pyscript.memory_set
                                              data:
                                                key: "{{ ksel }}"
                                                value: "{{ new_val }}"
                                                scope: "{{ scope }}"
                                                expiration_days: "{{ exp_days }}"
                                                tags: "{{ resp_get_from_search.tags | default('', true) }}"
                                              response_variable: resp_update_exp_search
                                            - choose:
                                                - conditions: "{{ resp_update_exp_search.status == 'ok' }}"
                                                  sequence:
                                                    - set_conversation_response: "Updated and restored {{ ksel }}."
                                              default:
                                                - set_conversation_response: "Unable to update right now."
                                        - conditions: "{{ (wait.trigger.sentence if wait.trigger is not none else '') in create_new_cmds and allow_force_new }}"
                                          sequence:
                                            - variables:
                                                new_key: "{{ key_norm if key_norm|length > 0 else (key_phrase | lower | replace(' ','_')) }}"
                                            - service: pyscript.memory_set
                                              data:
                                                key: "{{ new_key }}"
                                                value: "{{ resp_get_from_search.value }}"
                                                scope: "{{ scope }}"
                                                expiration_days: "{{ exp_days }}"
                                                tags: "{{ resp_get_from_search.tags | default('', true) }}"
                                                force_new: true
                                              response_variable: resp_new_from_exp_search
                                            - choose:
                                                - conditions: "{{ resp_new_from_exp_search.status == 'ok' }}"
                                                  sequence:
                                                    - set_conversation_response: "Created new entry {{ resp_new_from_exp_search.key or new_key }}."
                                              default:
                                                - set_conversation_response: "Unable to create a new entry right now."
                              default:
                                - set_conversation_response: "Canceled."
                            - stop:
                        - conditions: "{{ c in more_cmds }}"
                          sequence:
                            - variables: { page: "{{ page + 1 }}" }
                        - conditions: "{{ c in refine_cmds }}"
                          sequence:
                            - set_conversation_response: "Please say extra keywords to refine your search."
                            - wait_for_trigger:
                                - trigger: conversation
                                  command: "{refine_extra}"
                              timeout: !input choice_timeout
                              continue_on_timeout: false
                            - variables:
                                extra: "{{ trigger.slots.refine_extra if wait.trigger is not none else '' }}"
                            - service: pyscript.memory_search
                              data:
                                query: "{{ (key_phrase ~ ' ' ~ extra) | trim }}"
                                limit: "{{ s_limit }}"
                              response_variable: resp_s_refine
                            - choose:
                                - conditions: "{{ resp_s_refine.status != 'ok' }}"
                                  sequence:
                                    - set_conversation_response: "Search failed. Please try again later."
                                - conditions: "{{ (resp_s_refine.results | length) == 0 }}"
                                  sequence:
                                    - set_conversation_response: "No matching results after refine."
                              default:
                                - variables:
                                    all_items: "{{ resp_s_refine.results }}"
                                    page: 0
                      default:
                        - set_conversation_response: "Canceled."
                        - stop:
      - conditions: "{{ trigger.id == 'forget' and key_phrase|length > 0 }}"
        sequence:
          - choose:
              - conditions: "{{ must_confirm_delete }}"
                sequence:
                  - set_conversation_response: >
                      Delete "{{ key_norm or key_phrase }}"? Say {{ (yes_cmds[0] if yes_cmds else 'yes') }} or {{ (no_cmds[0] if no_cmds else 'no') }}.
                  - wait_for_trigger:
                      - trigger: conversation
                        command: !input yes_commands
                      - trigger: conversation
                        command: !input no_commands
                    timeout: !input choice_timeout
                  - choose:
                      - conditions: "{{ (wait.trigger.sentence if wait.trigger is not none else '') in yes_cmds }}"
                        sequence:
                          - service: pyscript.memory_forget
                            data:
                              key: "{{ key_norm if key_norm|length > 0 else (key_phrase | lower | replace(' ','_')) }}"
                            response_variable: resp_del_try
                          - choose:
                              - conditions: "{{ resp_del_try.status == 'ok' }}"
                                sequence:
                                  - set_conversation_response: "Deleted {{ resp_del_try.key or (key_norm or key_phrase) }}."
                              - conditions: "{{ resp_del_try.error == 'not_found' and (resp_del_try.matches | default([], true) | length) == 0 }}"
                                sequence:
                                  - set_conversation_response: "Nothing to delete for that entry."
                              - conditions: "{{ resp_del_try.error == 'ambiguous' and (resp_del_try.matches | length) > 0 }}"
                                sequence:
                                  - variables:
                                      itemsd: "{{ resp_del_try.matches[:max_choices] }}"
                                  - set_conversation_response: >
                                      I found a few candidates:
                                      {% for it in itemsd -%}
                                      {{ loop.index }}) {{ it.key }} — "{{ (it.value or '') | string | truncate(60, True) }}"
                                      {% endfor %}
                                      Say a number to delete it, or say "{{ (cancel_cmds[0] if cancel_cmds else 'cancel') }}".
                                  - wait_for_trigger:
                                      - trigger: conversation
                                        command: ["1","one","first"]
                                      - trigger: conversation
                                        command: ["2","two","second"]
                                      - trigger: conversation
                                        command: ["3","three","third"]
                                      - trigger: conversation
                                        command: ["4","four","fourth"]
                                      - trigger: conversation
                                        command: ["5","five","fifth"]
                                      - trigger: conversation
                                        command: !input cancel_commands
                                    timeout: !input choice_timeout
                                  - variables:
                                      c: "{{ wait.trigger.sentence if wait.trigger is not none else '' }}"
                                      pick_num: >
                                        {% if c in ['1','2','3','4','5'] %}{{ c | int }}
                                        {% elif c in num_aliases %}{{ num_aliases[c] }}
                                        {% else %}0{% endif %}
                                  - choose:
                                      - conditions: "{{ 1 <= pick_num <= (itemsd | length) }}"
                                        sequence:
                                          - variables:
                                              chosen_key: "{{ itemsd[pick_num - 1].key }}"
                                              snip_d2: "{{ (itemsd[pick_num - 1].value or '') | string | truncate(60, True) }}"
                                          - set_conversation_response: >
                                              Confirm delete "{{ chosen_key }}" — "{{ snip_d2 }}"? Say {{ (yes_cmds[0] if yes_cmds else 'yes') }} or {{ (no_cmds[0] if no_cmds else 'no') }}.
                                          - wait_for_trigger:
                                              - trigger: conversation
                                                command: !input yes_commands
                                              - trigger: conversation
                                                command: !input no_commands
                                            timeout: !input choice_timeout
                                          - choose:
                                              - conditions: "{{ (wait.trigger.sentence if wait.trigger is not none else '') in yes_cmds }}"
                                                sequence:
                                                  - service: pyscript.memory_forget
                                                    data:
                                                      key: "{{ chosen_key }}"
                                                    response_variable: resp_deln
                                                  - choose:
                                                      - conditions: "{{ resp_deln.status == 'ok' }}"
                                                        sequence:
                                                          - set_conversation_response: "Deleted {{ chosen_key }}."
                                                    default:
                                                      - set_conversation_response: "I couldn't delete it right now."
                                            default:
                                              - set_conversation_response: "Canceled."
                                    default:
                                      - set_conversation_response: "Canceled."
                            default:
                              - set_conversation_response: "I couldn't delete it right now."
                    default:
                      - set_conversation_response: "Canceled."
            default:
              - service: pyscript.memory_forget
                data:
                  key: "{{ key_norm if key_norm|length > 0 else (key_phrase | lower | replace(' ','_')) }}"
                response_variable: resp_del_try2
              - choose:
                  - conditions: "{{ resp_del_try2.status == 'ok' }}"
                    sequence:
                      - set_conversation_response: "Deleted {{ resp_del_try2.key or (key_norm or key_phrase) }}."
                  - conditions: "{{ resp_del_try2.error == 'not_found' and (resp_del_try2.matches | default([], true) | length) == 0 }}"
                    sequence:
                      - set_conversation_response: "Nothing to delete for that entry."
                  - conditions: "{{ resp_del_try2.error == 'ambiguous' and (resp_del_try2.matches | length) > 0 }}"
                    sequence:
                      - variables:
                          itemsd: "{{ resp_del_try2.matches[:max_choices] }}"
                      - set_conversation_response: >
                          I found a few candidates:
                          {% for it in itemsd -%}
                          {{ loop.index }}) {{ it.key }} — "{{ (it.value or '') | string | truncate(60, True) }}"
                          {% endfor %}
                          Say a number to delete it, or say "{{ (cancel_cmds[0] if cancel_cmds else 'cancel') }}".
                      - wait_for_trigger:
                          - trigger: conversation
                            command: ["1","one","first"]
                          - trigger: conversation
                            command: ["2","two","second"]
                          - trigger: conversation
                            command: ["3","three","third"]
                          - trigger: conversation
                            command: ["4","four","fourth"]
                          - trigger: conversation
                            command: ["5","five","fifth"]
                          - trigger: conversation
                            command: !input cancel_commands
                        timeout: !input choice_timeout
                      - variables:
                          c: "{{ wait.trigger.sentence if wait.trigger is not none else '' }}"
                          pick_num: >
                            {% if c in ['1','2','3','4','5'] %}{{ c | int }}
                            {% elif c in num_aliases %}{{ num_aliases[c] }}
                            {% else %}0{% endif %}
                      - choose:
                          - conditions: "{{ 1 <= pick_num <= (itemsd | length) }}"
                            sequence:
                              - variables:
                                  chosen_key: "{{ itemsd[pick_num - 1].key }}"
                              - choose:
                                  - conditions: "{{ must_confirm_delete }}"
                                    sequence:
                                      - set_conversation_response: >
                                          Confirm delete "{{ chosen_key }}"? Say {{ (yes_cmds[0] if yes_cmds else 'yes') }} or {{ (no_cmds[0] if no_cmds else 'no') }}.
                                      - wait_for_trigger:
                                          - trigger: conversation
                                            command: !input yes_commands
                                          - trigger: conversation
                                            command: !input no_commands
                                        timeout: !input choice_timeout
                                      - choose:
                                          - conditions: "{{ (wait.trigger.sentence if wait.trigger is not none else '') in yes_cmds }}"
                                            sequence:
                                              - service: pyscript.memory_forget
                                                data:
                                                  key: "{{ chosen_key }}"
                                                response_variable: resp_deln2
                                              - choose:
                                                  - conditions: "{{ resp_deln2.status == 'ok' }}"
                                                    sequence:
                                                      - set_conversation_response: "Deleted {{ chosen_key }}."
                                                default:
                                                  - set_conversation_response: "I couldn't delete it right now."
                                        default:
                                          - set_conversation_response: "Canceled."
                                default:
                                  - service: pyscript.memory_forget
                                    data:
                                      key: "{{ chosen_key }}"
                                    response_variable: resp_deln3
                                  - choose:
                                      - conditions: "{{ resp_deln3.status == 'ok' }}"
                                        sequence:
                                          - set_conversation_response: "Deleted {{ chosen_key }}."
                                    default:
                                      - set_conversation_response: "I couldn't delete it right now."
                        default:
                          - set_conversation_response: "Canceled."
                default:
                  - set_conversation_response: "I couldn't delete it right now."
    default:
      - set_conversation_response: "I didn't quite catch that. Do you want to save, find, search, or delete something?"
