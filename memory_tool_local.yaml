blueprint:
  name: Voice - Memory Tool
  author: luuquangvu
  description: >
    # Fully local universal memory tool used for Voice Assistant

    ## Blueprint Setup

    ### Required

    * The Pyscript integration needs to be installed through HACS and properly configured.

    * The `scripts/memory.py` and `scripts/common_utilities.py` scripts need to be copied into the `config/pyscript` folder.

    * The mentioned file(s) is/are included in the repository.

    ### Optional

    * Add triggers or change the existing ones.

    * Adjust the tool settings to fit your needs.

    * Check `sensor.memory_result` to quickly view the current status of the Memory Tool.
  domain: automation
  homeassistant:
    min_version: 2024.10.0
  input:
    trigger_settings:
      name: Trigger settings
      icon: mdi:chat
      collapsed: true
      description:
        Settings for the trigger, you can adjust them, or translate them to your own language
      input:
        set_commands:
          name: Set commands
          description: Phrases that trigger SET (save/update).
          default:
            - "save {value} to {key_phrase}"
            - "remember {key_phrase} is {value}"
            - "create note {key_phrase} is {value}"
          selector: { text: { multiple: true } }
        get_commands:
          name: Get/Recall commands
          description: Phrases that trigger GET (retrieve).
          default:
            - "find {key_phrase}"
            - "recall {key_phrase}"
            - "get info {key_phrase}"
          selector: { text: { multiple: true } }
        search_commands:
          name: Search-only commands
          description: Phrases that trigger SEARCH.
          default:
            - "search {key_phrase}"
          selector: { text: { multiple: true } }
        forget_commands:
          name: Forget/Delete commands
          description: Phrases that trigger FORGET (delete).
          default:
            - "delete {key_phrase}"
            - "forget {key_phrase}"
            - "remove {key_phrase}"
          selector: { text: { multiple: true } }
        yes_commands:
          name: Yes/Confirm phrases
          description: Using for selection or confirmation steps.
          default:
            - "yes"
            - "yep"
            - "sure"
            - "ok"
            - "okay"
            - "confirm"
            - "do it"
          selector: { text: { multiple: true } }
        no_commands:
          name: No/Cancel phrases
          description: Using for selection or confirmation steps.
          default:
            - "cancel"
            - "no"
            - "nope"
            - "not right now"
            - "abort"
          selector: { text: { multiple: true } }
        create_new_commands:
          name: Create-new phrases
          description: Explicitly create a new entry despite duplicate tags.
          default:
            - "create new"
            - "new"
            - "make new"
          selector: { text: { multiple: true } }
        more_commands:
          name: Show-more phrases (pagination)
          description: Using for selection or confirmation steps.
          default:
            - "more"
            - "next"
            - "show more"
          selector: { text: { multiple: true } }
        restore_commands:
          name: Restore phrases (reactivate expired entry as-is)
          description: Using for selection or confirmation steps.
          default:
            - "restore"
            - "reactivate"
            - "bring back"
          selector: { text: { multiple: true } }
        update_commands:
          name: Update phrases (change value before restoring)
          description: Using for selection or confirmation steps.
          default:
            - "change to {value}"
            - "update to {value}"
            - "edit to {value}"
          selector: { text: { multiple: true } }
    tool_settings:
      name: Tool settings
      icon: mdi:tools
      collapsed: true
      description:
        Settings for the trigger, you can adjust them, or translate them to your own language
      input:
        default_scope:
          name: Default scope
          description: Apply to user | household | session
          default: user
          selector:
            select:
              options: [user, household, session]
              mode: dropdown
        default_expiration_days:
          name: Default expiration
          description: Days before expiry. Range 0-3650 (0 = forever).
          default: 180
          selector: { number: { min: 0, max: 3650, mode: box } }
        default_search_limit:
          name: Default search fetch limit
          description: Number of entries fetched from the backend. Range 1-50 (entries).
          default: 5
          selector: { number: { min: 1, max: 50, mode: box } }
        max_list_choices:
          name: Maximum entries to display per page (pagination)
          description: Range 1-5 (entries).
          default: 3
          selector: { number: { min: 1, max: 5, mode: box } }
        confirm_delete:
          name: Require delete confirmation
          description: Require confirmation before deleting an entry.
          default: true
          selector: { boolean: {} }
        allow_force_new:
          name: Allow force_new on duplicates
          description: User require to explicitly says create new.
          default: true
          selector: { boolean: {} }
        choice_timeout:
          name: Choice/confirmation timeout
          description: The seconds to wait before timing out. Range 5-120 (seconds).
          default: 30
          selector: { number: { min: 5, max: 120, mode: slider } }
mode: single
max_exceeded: silent

variables:
  version: 20250928
  store_key: "memory_tool"
  trigger_id: "{{ (trigger.id | string) if (trigger.id is defined and (trigger.id | length) > 0) else '' }}"
  key_phrase: "{{ trigger.slots.key_phrase | default('', true) }}"
  value: "{{ trigger.slots.value | default('', true) }}"
  scope: !input default_scope
  exp_days: !input default_expiration_days
  s_limit: !input default_search_limit
  max_choices_cfg: !input max_list_choices
  max_choices: "{{ [max_choices_cfg, 5] | min }}"
  must_confirm_delete: !input confirm_delete
  allow_force_new: !input allow_force_new
  choice_timeout: !input choice_timeout
  yes_cmds: !input yes_commands
  no_cmds: !input no_commands
  create_new_cmds: !input create_new_commands
  more_cmds: !input more_commands
  restore_cmds: !input restore_commands
  update_cmds: !input update_commands
  numbers:
    - 1
    - 2
    - 3
    - 4
    - 5
  num_aliases:
    one: 1
    first: 1
    two: 2
    second: 2
    three: 3
    third: 3
    four: 4
    fourth: 4
    five: 5
    fifth: 5
  key_norm: >
    {% set k = (key_phrase or '') | lower -%}
    {% set k = k | regex_replace('[^a-z0-9\\s_]+',' ') -%}
    {% set k = k | regex_replace('\\s+',' ') | trim -%}
    {% set toks = k.split(' ') -%}
    {% set toks = toks | reject('search','^[a-z]*[0-9]+$', ignorecase=True) | list -%}
    {% set key2 = toks | join('_') -%}
    {{ key2 if key2 else k | replace(' ','_') }}
  tags_auto: >
    {% set phrase = (key_phrase or '') | lower -%}
    {{ phrase if phrase else 'note' }}

triggers:
  - id: set
    trigger: conversation
    command: !input set_commands
  - id: get
    trigger: conversation
    command: !input get_commands
  - id: search
    trigger: conversation
    command: !input search_commands
  - id: forget
    trigger: conversation
    command: !input forget_commands
  - id: resume_choice_number
    trigger: conversation
    command:
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
  - id: resume_choice_word
    trigger: conversation
    command:
      - one
      - two
      - three
      - four
      - five
      - first
      - second
      - third
      - fourth
      - fifth
  - id: resume_create_new
    trigger: conversation
    command: !input create_new_commands
  - id: resume_yes
    trigger: conversation
    command: !input yes_commands
  - id: resume_no
    trigger: conversation
    command: !input no_commands
  - id: resume_more
    trigger: conversation
    command: !input more_commands
  - id: resume_restore
    trigger: conversation
    command: !input restore_commands
  - id: resume_update
    trigger: conversation
    command: !input update_commands

actions:
  - choose:
      - conditions: "{{ trigger_id == 'set' and key_phrase|length > 0 and value|length > 0 }}"
        sequence:
          - action: pyscript.memory_set
            data:
              key: "{{ key_norm if key_norm|length > 0 else (key_phrase | lower | replace(' ','_')) }}"
              value: "{{ value }}"
              scope: "{{ scope }}"
              expiration_days: "{{ exp_days }}"
              tags: "{{ tags_auto }}"
              force_new: false
            response_variable: resp_set
          - choose:
              - conditions: "{{ resp_set.status == 'ok' }}"
                sequence:
                  - set_conversation_response: "Saved {{ (resp_set.key or (key_norm or key_phrase)) | replace('_', ' ') }}."
              - conditions: "{{ resp_set.error == 'duplicate_tags' and (resp_set.matches | length) > 0 }}"
                sequence:
                  - variables:
                      matches: "{{ resp_set.matches[:max_choices] }}"
                      prompt_text: >
                        I found similar entries:

                        {% for m in matches -%}
                        {{ loop.index }}. {{ m.key | replace('_', ' ') }}: {{ (m.value or '') | string | truncate(15) }}

                        {% endfor -%}
                        Say a number to update that existing entry, or say {{ (create_new_cmds[0] if create_new_cmds else 'create new') }} to save as a new entry, or say {{ (no_cmds[0] if no_cmds else 'cancel') }}?
                      cache_payload: >
                        {% set ns = namespace(items=[]) %}
                        {% for m in matches %}
                        {% set ns.items = ns.items + [{'key': m.key, 'value': (m.value or '') | string | truncate(15)}] %}
                        {% endfor %}
                        {{ {
                          'pending_action': 'set_duplicate_choice',
                          'matches': ns.items,
                          'value': value,
                          'scope': scope,
                          'expiration_days': exp_days,
                          'tags': tags_auto,
                          'key_norm': key_norm,
                          'key_phrase': key_phrase,
                          'prompt': prompt_text,
                          'allow_force_new': allow_force_new
                        } }}
                  - action: pyscript.memory_cache_set
                    data:
                      key: "{{ store_key }}"
                      value: "{{ cache_payload }}"
                      ttl_seconds: "{{ choice_timeout }}"
                    response_variable: cache_state
                  - set_conversation_response: "{{ prompt_text }}"
            default:
              - set_conversation_response: "I couldn't save due to an error. Would you like to try again?"
      - conditions: "{{ trigger_id == 'get' and key_phrase|length > 0 }}"
        sequence:
          - action: pyscript.memory_get
            data:
              key: "{{ key_norm if key_norm|length > 0 else (key_phrase | lower | replace(' ','_')) }}"
            response_variable: resp_get
          - choose:
              - conditions: "{{ resp_get.status == 'ok' }}"
                sequence:
                  - set_conversation_response: "{{ resp_get.value }}"
              - conditions: "{{ resp_get.error == 'expired' }}"
                sequence:
                  - variables:
                      kget: "{{ resp_get.key | default(key_norm or key_phrase) }}"
                      prompt_text: >
                        This entry has expired{% if resp_get.value | default('', true) -%}: {{ resp_get.value | string | truncate(15) }}{% endif -%}.

                        Say {{ (restore_cmds[0] if restore_cmds else 'restore') }} to reactivate, say {{ (update_cmds[0] if update_cmds else 'change to {value}') }} to store a new value, or say {{ (no_cmds[0] if no_cmds else 'cancel') }}?
                      cache_payload: >
                        {{ {
                          'pending_action': 'get_expired_choice',
                          'key': kget,
                          'value': resp_get.value,
                          'tags': resp_get.tags | default('', true),
                          'scope': scope,
                          'expiration_days': exp_days,
                          'key_phrase': key_phrase,
                          'key_norm': key_norm,
                          'prompt': prompt_text,
                          'allow_force_new': allow_force_new
                        } }}
                  - action: pyscript.memory_cache_set
                    data:
                      key: "{{ store_key }}"
                      value: "{{ cache_payload }}"
                      ttl_seconds: "{{ choice_timeout }}"
                    response_variable: cache_state
                  - set_conversation_response: "{{ prompt_text }}"
              - conditions: "{{ resp_get.error == 'not_found' and (resp_get.matches | default([], true) | length) == 0 }}"
                sequence:
                  - set_conversation_response: "I couldn't find that entry."
              - conditions: "{{ resp_get.error == 'ambiguous' and (resp_get.matches | length) > 0 }}"
                sequence:
                  - variables:
                      items: "{{ resp_get.matches[:max_choices] }}"
                  - variables:
                      items: "{{ resp_get.matches[:max_choices] }}"
                      prompt_text: >
                        I found a few candidates:

                        {% for it in items -%}
                        {{ loop.index }}. {{ it.key | replace('_', ' ') }}: {{ (it.value or '') | string | truncate(15) }}

                        {% endfor -%}
                        Say a number to open it, or say {{ (no_cmds[0] if no_cmds else 'cancel') }}?
                      cache_payload: >
                        {% set ns = namespace(items=[]) %}
                        {% for it in items %}
                        {% set ns.items = ns.items + [{'key': it.key, 'value': (it.value or '') | string | truncate(15)}] %}
                        {% endfor %}
                        {{ {
                          'pending_action': 'get_ambiguous_choice',
                          'entries': ns.items,
                          'prompt': prompt_text
                        } }}
                  - action: pyscript.memory_cache_set
                    data:
                      key: "{{ store_key }}"
                      value: "{{ cache_payload }}"
                      ttl_seconds: "{{ choice_timeout }}"
                    response_variable: cache_state
                  - set_conversation_response: "{{ prompt_text }}"
            default:
              - set_conversation_response: "I couldn't retrieve it right now."
      - conditions: "{{ trigger_id == 'search' and key_phrase|length > 0 }}"
        sequence:
          - action: pyscript.memory_search
            data:
              query: "{{ key_phrase }}"
              limit: "{{ s_limit }}"
            response_variable: resp_s
          - choose:
              - conditions: "{{ resp_s.status != 'ok' }}"
                sequence:
                  - set_conversation_response: "Search failed. Please try again later."
              - conditions: "{{ (resp_s.results | length) == 0 }}"
                sequence:
                  - set_conversation_response: "No matching results."
            default:
              - variables:
                  all_items: "{{ resp_s.results }}"
                  prompt_text: >
                    {% set total = all_items | length %}
                    {% set start_idx = 0 %}
                    {% set end_idx = [max_choices, total] | min %}
                    {% set page_items = all_items[:max_choices] %}
                    Results ({{ start_idx + 1 }}-{{ end_idx }} of {{ total }}):

                    {% for it in page_items -%}
                    {{ loop.index }}. {{ it.key | replace('_', ' ') }}: {{ (it.value or '') | string | truncate(15) }}

                    {% endfor -%}
                    Say a number to open it, say {{ (more_cmds[0] if more_cmds else 'more') }} for next page, or say {{ (no_cmds[0] if no_cmds else 'cancel') }}?
                  cache_payload: >
                    {{ {
                      'pending_action': 'search_results',
                      'results': all_items,
                      'page': 0,
                      'query': key_phrase,
                      'prompt': prompt_text
                    } }}
              - action: pyscript.memory_cache_set
                data:
                  key: "{{ store_key }}"
                  value: "{{ cache_payload }}"
                  ttl_seconds: "{{ choice_timeout }}"
                response_variable: cache_state
              - set_conversation_response: "{{ prompt_text }}"
      - conditions: "{{ trigger_id == 'forget' and key_phrase|length > 0 }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ must_confirm_delete }}"
            then:
              - variables:
                  prompt_text: >
                    Delete {{ (key_norm or key_phrase) | replace('_', ' ') }}. Say {{ (yes_cmds[0] if yes_cmds else 'yes') }} or say {{ (no_cmds[0] if no_cmds else 'cancel') }}?
                  cache_payload: >
                    {{ {
                      'pending_action': 'forget_confirm_primary',
                      'key': key_norm if key_norm|length > 0 else (key_phrase | lower | replace(' ','_')),
                      'key_phrase': key_phrase,
                      'prompt': prompt_text
                    } }}
              - action: pyscript.memory_cache_set
                data:
                  key: "{{ store_key }}"
                  value: "{{ cache_payload }}"
                  ttl_seconds: "{{ choice_timeout }}"
                response_variable: cache_state
              - set_conversation_response: "{{ prompt_text }}"
            else:
              - action: pyscript.memory_forget
                data:
                  key: "{{ key_norm if key_norm|length > 0 else (key_phrase | lower | replace(' ','_')) }}"
                response_variable: resp_forget
              - choose:
                  - conditions: "{{ resp_forget.status == 'ok' }}"
                    sequence:
                      - set_conversation_response: "Deleted {{ (resp_forget.key or (key_norm or key_phrase)) | replace('_', ' ') }}."
                  - conditions: "{{ resp_forget.error == 'not_found' and (resp_forget.matches | default([], true) | length) == 0 }}"
                    sequence:
                      - set_conversation_response: "Nothing to delete for that entry."
                  - conditions: "{{ resp_forget.error == 'ambiguous' and (resp_forget.matches | length) > 0 }}"
                    sequence:
                      - variables:
                          itemsd: "{{ resp_forget.matches[:max_choices] }}"
                          prompt_text: >
                            I found a few candidates:
              
                            {% for it in itemsd -%}
                            {{ loop.index }}. {{ it.key | replace('_', ' ') }}: {{ (it.value or '') | string | truncate(15) }}
              
                            {% endfor -%}
                            Say a number to delete it, or say {{ (no_cmds[0] if no_cmds else 'cancel') }}?
                          cache_payload: >
                            {% set ns = namespace(items=[]) %}
                            {% for it in itemsd %}
                            {% set ns.items = ns.items + [{'key': it.key, 'value': (it.value or '') | string | truncate(15)}] %}
                            {% endfor %}
                            {{ {
                              'pending_action': 'forget_ambiguous_choice',
                              'entries': ns.items,
                              'must_confirm': must_confirm_delete,
                              'prompt': prompt_text
                            } }}
                      - action: pyscript.memory_cache_set
                        data:
                          key: "{{ store_key }}"
                          value: "{{ cache_payload }}"
                          ttl_seconds: "{{ choice_timeout }}"
                        response_variable: cache_state
                      - set_conversation_response: "{{ prompt_text }}"
                default:
                  - set_conversation_response: "I couldn't delete it right now."
      - conditions: "{{ trigger_id.startswith('resume_') }}"
        sequence:
          - action: pyscript.memory_cache_get
            data:
              key: "{{ store_key }}"
            response_variable: resume_cache
          - choose:
              - conditions: "{{ resume_cache.status == 'ok' and (resume_cache.value | default('', true) | length) > 0 }}"
                sequence:
                  - variables:
                      resume_payload: "{{ resume_cache.value }}"
                  - action: pyscript.memory_cache_forget
                    data:
                      key: "{{ store_key }}"
                    response_variable: forget_cache
                  - choose:
                      - conditions: "{{ resume_payload.pending_action == 'set_duplicate_choice' }}"
                        sequence:
                          - variables:
                              resume_sentence: "{{ trigger.sentence | default('', true) | string | lower }}"
                              matches_ctx: "{{ resume_payload.matches | default([], true) }}"
                              pick_num: >
                                {% if (resume_sentence | int(0)) in numbers -%}
                                {{ resume_sentence | int(0) }}
                                {% elif (resume_sentence | string) in num_aliases -%}
                                {{ num_aliases[(resume_sentence | string)] }}
                                {% else -%}0{% endif -%}
                              handled: false
                              final_response: ""
                          - choose:
                              - conditions: "{{ trigger_id == 'resume_no' }}"
                                sequence:
                                  - variables:
                                      handled: true
                                      final_response: "Canceled."
                              - conditions: "{{ trigger_id == 'resume_create_new' and resume_payload.allow_force_new }}"
                                sequence:
                                  - action: pyscript.memory_set
                                    data:
                                      key: "{{ resume_payload.key_norm or resume_payload.key_phrase }}"
                                      value: "{{ resume_payload.value }}"
                                      scope: "{{ resume_payload.scope }}"
                                      expiration_days: "{{ resume_payload.expiration_days }}"
                                      tags: "{{ resume_payload.tags }}"
                                      force_new: true
                                    response_variable: resp_force_new
                                  - variables:
                                      handled: true
                                  - choose:
                                      - conditions: "{{ resp_force_new.status == 'ok' }}"
                                        sequence:
                                          - variables:
                                              final_response: "Created new entry {{ (resp_force_new.key or (resume_payload.key_norm or resume_payload.key_phrase)) | replace('_', ' ') }}."
                                    default:
                                      - variables:
                                          final_response: "Unable to create a new entry right now."
                              - conditions: "{{ 1 <= pick_num <= (matches_ctx | length) }}"
                                sequence:
                                  - variables:
                                      chosen_item: "{{ matches_ctx[pick_num - 1] }}"
                                      chosen_key: "{{ chosen_item.key }}"
                                      handled: true
                                  - action: pyscript.memory_set
                                    data:
                                      key: "{{ chosen_key }}"
                                      value: "{{ resume_payload.value }}"
                                      scope: "{{ resume_payload.scope }}"
                                      expiration_days: "{{ resume_payload.expiration_days }}"
                                      tags: "{{ resume_payload.tags }}"
                                    response_variable: resp_update_existing
                                  - choose:
                                      - conditions: "{{ resp_update_existing.status == 'ok' }}"
                                        sequence:
                                          - variables:
                                              final_response: "Updated {{ chosen_key | replace('_', ' ') }}."
                                    default:
                                      - variables:
                                          final_response: "Unable to update right now."
                          - choose:
                              - conditions: "{{ handled }}"
                                sequence:
                                  - set_conversation_response: "{{ final_response if final_response | length > 0 else 'Okay.' }}"
                            default:
                              - variables:
                                  prompt_text: "{{ resume_payload.prompt }}"
                              - action: pyscript.memory_cache_set
                                data:
                                  key: "{{ store_key }}"
                                  value: "{{ resume_payload }}"
                                  ttl_seconds: "{{ choice_timeout }}"
                                response_variable: cache_state
                              - set_conversation_response: "{{ prompt_text }}"
                      - conditions: "{{ resume_payload.pending_action == 'get_ambiguous_choice' }}"
                        sequence:
                          - variables:
                              resume_sentence: "{{ trigger.sentence | default('', true) | lower }}"
                              items_ctx: "{{ resume_payload.entries | default([], true) }}"
                              prompt_text: "{{ resume_payload.prompt }}"
                              pick_num: >
                                {% if (resume_sentence | int(0)) in numbers -%}
                                {{ resume_sentence | int(0) }}
                                {% elif (resume_sentence | string) in num_aliases -%}
                                {{ num_aliases[(resume_sentence | string)] }}
                                {% else -%}0{% endif -%}
                              handled: false
                              final_response: ""
                          - choose:
                              - conditions: "{{ trigger_id == 'resume_no' }}"
                                sequence:
                                  - variables:
                                      handled: true
                                      final_response: "Canceled."
                              - conditions: "{{ 1 <= pick_num <= (items_ctx | length) }}"
                                sequence:
                                  - variables:
                                      chosen_item: "{{ items_ctx[pick_num - 1] }}"
                                      chosen_key: "{{ chosen_item.key }}"
                                      handled: true
                                  - action: pyscript.memory_get
                                    data:
                                      key: "{{ chosen_key }}"
                                    response_variable: resp_resume_get
                                  - choose:
                                      - conditions: "{{ resp_resume_get.status == 'ok' }}"
                                        sequence:
                                          - variables:
                                              final_response: "{{ resp_resume_get.value }}"
                                      - conditions: "{{ resp_resume_get.error == 'expired' }}"
                                        sequence:
                                          - variables:
                                              prompt_text: >
                                                This entry has expired{% if resp_resume_get.value | default('', true) -%}: {{ resp_resume_get.value | string | truncate(15) }}{% endif -%}.

                                                Say {{ (restore_cmds[0] if restore_cmds else 'restore') }} to reactivate, say {{ (update_cmds[0] if update_cmds else 'change to {value}') }} to store a new value, or say {{ (no_cmds[0] if no_cmds else 'cancel') }}?
                                          - variables:
                                              expired_payload: >
                                                {{ {
                                                  'pending_action': 'get_expired_choice',
                                                  'key': chosen_key,
                                                  'value': resp_resume_get.value,
                                                  'tags': resp_resume_get.tags | default('', true),
                                                  'scope': scope,
                                                  'expiration_days': exp_days,
                                                  'key_phrase': resume_payload.key_phrase | default(key_phrase, true),
                                                  'key_norm': chosen_key,
                                                  'prompt': prompt_text,
                                                  'allow_force_new': allow_force_new
                                                } }}
                                          - action: pyscript.memory_cache_set
                                            data:
                                              key: "{{ store_key }}"
                                              value: "{{ expired_payload }}"
                                              ttl_seconds: "{{ choice_timeout }}"
                                            response_variable: cache_state
                                          - variables:
                                              final_response: "{{ prompt_text }}"
                                    default:
                                      - variables:
                                          final_response: "I couldn't retrieve it right now."
                          - choose:
                              - conditions: "{{ handled }}"
                                sequence:
                                  - set_conversation_response: "{{ final_response if final_response | length > 0 else 'Okay.' }}"
                            default:
                              - action: pyscript.memory_cache_set
                                data:
                                  key: "{{ store_key }}"
                                  value: "{{ resume_payload }}"
                                  ttl_seconds: "{{ choice_timeout }}"
                                response_variable: cache_state
                              - set_conversation_response: "{{ prompt_text }}"
                      - conditions: "{{ resume_payload.pending_action == 'search_results' }}"
                        sequence:
                          - variables:
                              resume_sentence: "{{ trigger.sentence | default('', true) | lower }}"
                              results_list: "{{ resume_payload.results | default([], true) }}"
                              page: "{{ resume_payload.page | default(0, true) }}"
                              prompt_text: "{{ resume_payload.prompt }}"
                              start_idx: "{{ (page | int) * max_choices }}"
                              end_idx: "{{ [((page | int) * max_choices) + max_choices, (results_list | length)] | min }}"
                              page_items: "{{ results_list[start_idx:end_idx] }}"
                              pick_num: >
                                {% if (resume_sentence | int(0)) in numbers -%}
                                {{ resume_sentence | int(0) }}
                                {% elif (resume_sentence | string) in num_aliases -%}
                                {{ num_aliases[(resume_sentence | string)] }}
                                {% else -%}0{% endif -%}
                              handled: false
                              final_response: ""
                          - choose:
                              - conditions: "{{ trigger_id == 'resume_no' }}"
                                sequence:
                                  - variables:
                                      handled: true
                                      final_response: "Canceled."
                              - conditions: "{{ trigger_id == 'resume_more' }}"
                                sequence:
                                  - variables:
                                      total_results: "{{ results_list | length }}"
                                      next_page: "{{ (page | int) + 1 }}"
                                      next_start: "{{ ((page | int) + 1) * max_choices }}"
                                  - choose:
                                      - conditions: "{{ next_start < total_results }}"
                                        sequence:
                                          - variables:
                                              next_end: "{{ [next_start + max_choices, total_results] | min }}"
                                              next_items: "{{ results_list[next_start:next_end] }}"
                                              prompt_text: >
                                                Results ({{ next_start + 1 }}-{{ next_end }} of {{ total_results }}):

                                                {% for it in next_items -%}
                                                {{ loop.index }}. {{ it.key | replace('_', ' ') }}: {{ (it.value or '') | string | truncate(15) }}

                                                {% endfor -%}
                                                Say a number to open it, say {{ (more_cmds[0] if more_cmds else 'more') }} for next page, or say {{ (no_cmds[0] if no_cmds else 'cancel') }}?
                                              next_payload: >
                                                {{ {
                                                  'pending_action': 'search_results',
                                                  'results': results_list,
                                                  'page': next_page,
                                                  'query': resume_payload.query | default(key_phrase, true),
                                                  'prompt': prompt_text
                                                } }}
                                          - action: pyscript.memory_cache_set
                                            data:
                                              key: "{{ store_key }}"
                                              value: "{{ next_payload }}"
                                              ttl_seconds: "{{ choice_timeout }}"
                                            response_variable: cache_state
                                          - variables:
                                              handled: true
                                              final_response: "{{ prompt_text }}"
                                    default:
                                      - action: pyscript.memory_cache_set
                                        data:
                                          key: "{{ store_key }}"
                                          value: "{{ resume_payload }}"
                                          ttl_seconds: "{{ choice_timeout }}"
                                        response_variable: cache_state
                                      - variables:
                                          handled: true
                                          final_response: "No more results."
                              - conditions: "{{ 1 <= pick_num <= (page_items | length) }}"
                                sequence:
                                  - variables:
                                      chosen_item: "{{ page_items[pick_num - 1] }}"
                                      chosen_key: "{{ chosen_item.key }}"
                                      handled: true
                                  - action: pyscript.memory_get
                                    data:
                                      key: "{{ chosen_key }}"
                                    response_variable: resp_resume_search_get
                                  - choose:
                                      - conditions: "{{ resp_resume_search_get.status == 'ok' }}"
                                        sequence:
                                          - variables:
                                              final_response: "{{ resp_resume_search_get.value }}"
                                      - conditions: "{{ resp_resume_search_get.error == 'expired' }}"
                                        sequence:
                                          - variables:
                                              prompt_text: >
                                                This entry has expired{% if resp_resume_search_get.value | default('', true) -%}: {{ resp_resume_search_get.value | string | truncate(15) }}{% endif -%}.

                                                Say {{ (restore_cmds[0] if restore_cmds else 'restore') }} to reactivate, say {{ (update_cmds[0] if update_cmds else 'change to {value}') }} to store a new value, or say {{ (no_cmds[0] if no_cmds else 'cancel') }}?
                                          - variables:
                                              expired_payload: >
                                                {{ {
                                                  'pending_action': 'get_expired_choice',
                                                  'key': chosen_key,
                                                  'value': resp_resume_search_get.value,
                                                  'tags': resp_resume_search_get.tags | default('', true),
                                                  'scope': scope,
                                                  'expiration_days': exp_days,
                                                  'key_phrase': resume_payload.query | default(key_phrase, true),
                                                  'key_norm': chosen_key,
                                                  'prompt': prompt_text,
                                                  'allow_force_new': allow_force_new
                                                } }}
                                          - action: pyscript.memory_cache_set
                                            data:
                                              key: "{{ store_key }}"
                                              value: "{{ expired_payload }}"
                                              ttl_seconds: "{{ choice_timeout }}"
                                            response_variable: cache_state
                                          - variables:
                                              final_response: "{{ prompt_text }}"
                                    default:
                                      - variables:
                                          final_response: "I couldn't retrieve it right now."
                          - choose:
                              - conditions: "{{ handled }}"
                                sequence:
                                  - set_conversation_response: "{{ final_response if final_response | length > 0 else 'Okay.' }}"
                            default:
                              - action: pyscript.memory_cache_set
                                data:
                                  key: "{{ store_key }}"
                                  value: "{{ resume_payload }}"
                                  ttl_seconds: "{{ choice_timeout }}"
                                response_variable: cache_state
                              - set_conversation_response: "{{ prompt_text }}"
                      - conditions: "{{ resume_payload.pending_action == 'forget_confirm_primary' }}"
                        sequence:
                          - variables:
                              resume_sentence: "{{ trigger.sentence | default('', true) | lower }}"
                              target_key: "{{ resume_payload.key }}"
                              prompt_text: "{{ resume_payload.prompt }}"
                              handled: false
                              final_response: ""
                          - choose:
                              - conditions: "{{ trigger_id == 'resume_yes' }}"
                                sequence:
                                  - variables:
                                      handled: true
                                  - action: pyscript.memory_forget
                                    data:
                                      key: "{{ target_key }}"
                                    response_variable: resp_forget_confirm
                                  - choose:
                                      - conditions: "{{ resp_forget_confirm.status == 'ok' }}"
                                        sequence:
                                          - variables:
                                              final_response: "Deleted {{ (resp_forget_confirm.key or target_key) | replace('_', ' ') }}."
                                      - conditions: "{{ resp_forget_confirm.error == 'not_found' and (resp_forget_confirm.matches | default([], true) | length) == 0 }}"
                                        sequence:
                                          - variables:
                                              final_response: "Nothing to delete for that entry."
                                      - conditions: "{{ resp_forget_confirm.error == 'ambiguous' and (resp_forget_confirm.matches | length) > 0 }}"
                                        sequence:
                                          - variables:
                                              itemsd: "{{ resp_forget_confirm.matches[:max_choices] }}"
                                              prompt_text: >
                                                I found a few candidates:

                                                {% for it in itemsd -%}
                                                {{ loop.index }}. {{ it.key | replace('_', ' ') }}: {{ (it.value or '') | string | truncate(15) }}

                                                {% endfor -%}
                                                Say a number to delete it, or say {{ (no_cmds[0] if no_cmds else 'cancel') }}?
                                              cache_payload: >
                                                {% set ns = namespace(items=[]) %}
                                                {% for it in itemsd %}
                                                {% set ns.items = ns.items + [{'key': it.key, 'value': (it.value or '') | string | truncate(15)}] %}
                                                {% endfor %}
                                                {{ {
                                                  'pending_action': 'forget_ambiguous_choice',
                                                  'entries': ns.items,
                                                  'must_confirm': must_confirm_delete,
                                                  'prompt': prompt_text
                                                } }}
                                          - action: pyscript.memory_cache_set
                                            data:
                                              key: "{{ store_key }}"
                                              value: "{{ cache_payload }}"
                                              ttl_seconds: "{{ choice_timeout }}"
                                            response_variable: cache_state
                                          - variables:
                                              final_response: "{{ prompt_text }}"
                                    default:
                                      - variables:
                                          final_response: "I couldn't delete it right now."
                              - conditions: "{{ trigger_id == 'resume_no' }}"
                                sequence:
                                  - variables:
                                      handled: true
                                      final_response: "Canceled."
                          - choose:
                              - conditions: "{{ handled }}"
                                sequence:
                                  - set_conversation_response: "{{ final_response if final_response | length > 0 else 'Okay.' }}"
                            default:
                              - action: pyscript.memory_cache_set
                                data:
                                  key: "{{ store_key }}"
                                  value: "{{ resume_payload }}"
                                  ttl_seconds: "{{ choice_timeout }}"
                                response_variable: cache_state
                              - set_conversation_response: "{{ prompt_text }}"
                      - conditions: "{{ resume_payload.pending_action == 'forget_ambiguous_choice' }}"
                        sequence:
                          - variables:
                              resume_sentence: "{{ trigger.sentence | default('', true) | lower }}"
                              items_ctx: "{{ resume_payload.entries | default([], true) }}"
                              prompt_text: "{{ resume_payload.prompt }}"
                              pick_num: >
                                {% if (resume_sentence | int(0)) in numbers -%}
                                {{ resume_sentence | int(0) }}
                                {% elif (resume_sentence | string) in num_aliases -%}
                                {{ num_aliases[(resume_sentence | string)] }}
                                {% else -%}0{% endif -%}
                              handled: false
                              final_response: ""
                          - choose:
                              - conditions: "{{ trigger_id == 'resume_no' }}"
                                sequence:
                                  - variables:
                                      handled: true
                                      final_response: "Canceled."
                              - conditions: "{{ 1 <= pick_num <= (items_ctx | length) }}"
                                sequence:
                                  - variables:
                                      chosen_item: "{{ items_ctx[pick_num - 1] }}"
                                      chosen_key: "{{ chosen_item.key }}"
                                      snip_value: "{{ chosen_item.value }}"
                                  - choose:
                                      - conditions: "{{ resume_payload.must_confirm }}"
                                        sequence:
                                          - variables:
                                              prompt_text: >
                                                Confirm delete {{ chosen_key | replace('_', ' ') }}{% if snip_value %}: {{ snip_value }}{% endif %}. Say {{ (yes_cmds[0] if yes_cmds else 'yes') }} or say {{ (no_cmds[0] if no_cmds else 'cancel') }}?
                                              confirm_payload: >
                                                {{ {
                                                  'pending_action': 'forget_confirm_secondary',
                                                  'key': chosen_key,
                                                  'prompt': prompt_text
                                                } }}
                                          - action: pyscript.memory_cache_set
                                            data:
                                              key: "{{ store_key }}"
                                              value: "{{ confirm_payload }}"
                                              ttl_seconds: "{{ choice_timeout }}"
                                            response_variable: cache_state
                                          - variables:
                                              handled: true
                                              final_response: "{{ prompt_text }}"
                                  - choose:
                                      - conditions: "{{ not resume_payload.must_confirm }}"
                                        sequence:
                                          - variables:
                                              handled: true
                                          - action: pyscript.memory_forget
                                            data:
                                              key: "{{ chosen_key }}"
                                            response_variable: resp_forget_choice
                                          - choose:
                                              - conditions: "{{ resp_forget_choice.status == 'ok' }}"
                                                sequence:
                                                  - variables:
                                                      final_response: "Deleted {{ chosen_key | replace('_', ' ') }}."
                                            default:
                                              - variables:
                                                  final_response: "I couldn't delete it right now."
                          - choose:
                              - conditions: "{{ handled }}"
                                sequence:
                                  - set_conversation_response: "{{ final_response if final_response | length > 0 else 'Okay.' }}"
                            default:
                              - action: pyscript.memory_cache_set
                                data:
                                  key: "{{ store_key }}"
                                  value: "{{ resume_payload }}"
                                  ttl_seconds: "{{ choice_timeout }}"
                                response_variable: cache_state
                              - set_conversation_response: "{{ prompt_text }}"
                      - conditions: "{{ resume_payload.pending_action == 'forget_confirm_secondary' }}"
                        sequence:
                          - variables:
                              resume_sentence: "{{ trigger.sentence | default('', true) | lower }}"
                              target_key: "{{ resume_payload.key }}"
                              prompt_text: "{{ resume_payload.prompt }}"
                              handled: false
                              final_response: ""
                          - choose:
                              - conditions: "{{ trigger_id == 'resume_yes' }}"
                                sequence:
                                  - action: pyscript.memory_forget
                                    data:
                                      key: "{{ target_key }}"
                                    response_variable: resp_forget_secondary
                                  - choose:
                                      - conditions: "{{ resp_forget_secondary.status == 'ok' }}"
                                        sequence:
                                          - variables:
                                              handled: true
                                              final_response: "Deleted {{ target_key | replace('_', ' ') }}."
                                    default:
                                      - variables:
                                          handled: true
                                          final_response: "I couldn't delete it right now."
                              - conditions: "{{ trigger_id == 'resume_no' }}"
                                sequence:
                                  - variables:
                                      handled: true
                                      final_response: "Canceled."
                          - choose:
                              - conditions: "{{ handled }}"
                                sequence:
                                  - set_conversation_response: "{{ final_response if final_response | length > 0 else 'Okay.' }}"
                            default:
                              - action: pyscript.memory_cache_set
                                data:
                                  key: "{{ store_key }}"
                                  value: "{{ resume_payload }}"
                                  ttl_seconds: "{{ choice_timeout }}"
                                response_variable: cache_state
                              - set_conversation_response: "{{ prompt_text }}"
                      - conditions: "{{ resume_payload.pending_action == 'get_expired_choice' }}"
                        sequence:
                          - variables:
                              resume_sentence: "{{ trigger.sentence | default('', true) | lower }}"
                              handled: false
                              final_response: ""
                          - choose:
                              - conditions: "{{ trigger_id == 'resume_restore' }}"
                                sequence:
                                  - action: pyscript.memory_set
                                    data:
                                      key: "{{ resume_payload.key }}"
                                      value: "{{ resume_payload.value }}"
                                      scope: "{{ resume_payload.scope }}"
                                      expiration_days: "{{ resume_payload.expiration_days }}"
                                      tags: "{{ resume_payload.tags }}"
                                    response_variable: resp_resume_restore
                                  - choose:
                                      - conditions: "{{ resp_resume_restore.status == 'ok' }}"
                                        sequence:
                                          - variables:
                                              handled: true
                                              final_response: "Restored {{ resume_payload.key | replace('_', ' ') }}."
                                    default:
                                      - variables:
                                          handled: true
                                          final_response: "Unable to restore right now."
                              - conditions: "{{ trigger_id == 'resume_update' }}"
                                sequence:
                                  - variables:
                                      new_val: "{{ value | default(resume_sentence, true) }}"
                                      handled: false
                                      final_response: ""
                                  - choose:
                                      - conditions: "{{ new_val | default('', true) | length > 0 }}"
                                        sequence:
                                          - action: pyscript.memory_set
                                            data:
                                              key: "{{ resume_payload.key }}"
                                              value: "{{ new_val }}"
                                              scope: "{{ resume_payload.scope }}"
                                              expiration_days: "{{ resume_payload.expiration_days }}"
                                              tags: "{{ resume_payload.tags }}"
                                            response_variable: resp_resume_update
                                          - choose:
                                              - conditions: "{{ resp_resume_update.status == 'ok' }}"
                                                sequence:
                                                  - variables:
                                                      handled: true
                                                      final_response: "Updated and restored {{ resume_payload.key | replace('_', ' ') }}."
                                            default:
                                              - variables:
                                                  handled: true
                                                  final_response: "Unable to update right now."
                                  - variables:
                                      prompt_text: "{{ resume_payload.prompt }}"
                                  - choose:
                                      - conditions: "{{ handled }}"
                                        sequence:
                                          - set_conversation_response: "{{ final_response if final_response | length > 0 else prompt_text }}"
                                    default:
                                      - action: pyscript.memory_cache_set
                                        data:
                                          key: "{{ store_key }}"
                                          value: "{{ resume_payload }}"
                                          ttl_seconds: "{{ choice_timeout }}"
                                        response_variable: cache_state
                                      - set_conversation_response: "{{ prompt_text }}"
                              - conditions: "{{ trigger_id == 'resume_no' }}"
                                sequence:
                                  - variables:
                                      handled: true
                                      final_response: "Canceled."
                          - choose:
                              - conditions: "{{ handled }}"
                                sequence:
                                  - set_conversation_response: "{{ final_response if final_response | length > 0 else 'Okay.' }}"
                            default:
                              - variables:
                                  prompt_text: "{{ resume_payload.prompt }}"
                              - action: pyscript.memory_cache_set
                                data:
                                  key: "{{ store_key }}"
                                  value: "{{ resume_payload }}"
                                  ttl_seconds: "{{ choice_timeout }}"
                                response_variable: cache_state
                              - set_conversation_response: "{{ prompt_text }}"
                    default:
                      - set_conversation_response: "I didn't quite catch that. Action {{ resume_payload.pending_action | default('') }} is not supported by the current handler."
            default:
              - set_conversation_response: "I didn't quite catch that. Could it be that the confirmation timed out?"
    default:
      - set_conversation_response: "I didn't quite catch that. Do you want to save, find, search, or delete something?"
