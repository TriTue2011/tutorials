blueprint:
  name: Telegram Bot Webhook
  author: VuLQ
  description: >-
    # A Telegram bot enabling seamless two-way communication with Home Assistant.

    ## Blueprint Setup

    ### Required

    * Create a Telegram bot if it does not already exist.

    * If the bot is also added to Telegram bot integration, it must be set up in broadcast mode.

    * Pyscript integration needs to be installed from HACS.

    * The `telegram_bot_handle_tool.py` script needs to be copied into the pyscript folder.

    * The `requirements.txt` file needs to be copied into the pyscript folder.

    * A Telegram bot token needs to be configured in configuration.yaml.

    * Redis needs to be installed and configured.

    ```

    #File configuration.yaml

    pyscript:
      allow_all_imports: true
      hass_is_global: true
      telegram_bot_token: !secret telegram_bot_token
      redis_host: localhost     # If you're using the HA Addon, it should be the addon's hostname: xxxxxxxx-redis
      redis_port: 6379      # Default: 6379

    ```

    ```

    #File secrets.yaml

    telegram_bot_token: XXXXXX      # Retrieve the key from the Telegram BotFather.

    ```

    ### Optional

    * Use `pyscript.set_telegram_webhook` to easily configure a Telegram Webhook ID automatically.

    * Use `pyscript.get_telegram_webhook` to check the current Telegram Webhook ID.

    * Use `pyscript.delete_telegram_webhook` to delete the Telegram Webhook ID when you are no longer using it.

    ### Note

    * The `file_content_analyzer_full_llm.yaml` blueprint must be installed to analyze and extract various types of information from media and document files.
  domain: automation
  homeassistant:
    min_version: 2025.8.0
  input:
    Webhook_settings:
      name: Settings for Webhook
      icon: mdi:webhook
      description: These settings allow you to set up the Webhook ID for receiving Telegram messages.
      input:
        webhook_id:
          name: Webhook ID
          description: Enter the desired Webhook ID, or use `pyscript.set_telegram_webhook` to automatically create one.
          selector:
            text:
    telegram_settings:
      name: Settings for Telegram
      icon: mdi:send-circle
      description: These settings allow you to set up the Telegram Chat IDs and optionally restrict specific user IDs within group chat IDs.
      input:
        chat_ids:
          name: Chat IDs
          description: Specified chat IDs enable communication with the Telegram bot.
          selector:
            text:
              multiple: true
        user_ids:
          name: User IDs
          description: You can optionally restrict specific user IDs within group chat IDs to enable communication with the Telegram bot. If left empty, by default, all users in the selected group chat IDs are allowed.
          selector:
            text:
              multiple: true
          default:
    agent_settings:
      name: Settings for Conversation Agent
      icon: mdi:robot-outline
      description: These settings allow you to set up the conversation agent responsible for managing messages.
      input:
        agent_id:
          name: Conversation Agent
          selector:
            entity:
              filter:
                domain: conversation
mode: queued
max_exceeded: silent
variables:
  chat_ids: !input chat_ids
  user_ids: !input user_ids
alias: Telegram bot webhook
description: ""
triggers:
  - trigger: webhook
    allowed_methods:
      - POST
    local_only: false
    webhook_id: !input webhook_id
conditions:
  - condition: template
    value_template: >-
      {{ trigger.json is defined and trigger.json.message is defined }}
  - condition: template
    value_template: >-
      {{ (trigger.json.message.chat.id | string) in chat_ids }}
  - condition: template
    value_template: >-
      {% if user_ids is list -%}
        {% if (trigger.json.message.from.id | string) in user_ids -%}
        {{ true }}
        {% else -%}
        {{ false }}
        {% endif -%}
      {% else -%}
      {{ true }}
      {% endif -%}
actions:
  - variables:
      chat_id: >-
        {{ ('id' ~ trigger.json.message.chat.id ~ '_' ~
        trigger.json.message.from.id) | slugify }}
  - action: pyscript.conversation_id_fetcher
    metadata: {}
    data:
      chat_id: "{{ chat_id }}"
    response_variable: chat
  - variables:
      conversation_id: >-
        {{ chat.conversation_id if (chat.conversation_id | default('', true) |
        length > 0) else chat_id }}
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.json.message.text is defined }}"
        sequence:
          - variables:
              input:
                prompt: >-
                  {% if trigger.json.message.reply_to_message is defined %} {%
                  if trigger.json.message.reply_to_message.text is defined %} {{
                  trigger.json.message.reply_to_message.text }} {% endif %} {%
                  if trigger.json.message.reply_to_message.caption is defined %}
                  {{ trigger.json.message.reply_to_message.caption }} {% endif
                  %} {% endif %}

                  {{ trigger.json.message.text }}
        alias: Process text
      - conditions:
          - condition: template
            value_template: "{{ trigger.json.message.photo is defined }}"
        sequence:
          - action: pyscript.telegram_media_handle_tool
            data:
              file_id: "{{ trigger.json.message.photo[-1].file_id }}"
            response_variable: file
          - variables:
              input:
                prompt: >-
                  {% if trigger.json.message.reply_to_message is defined %} {%
                  if trigger.json.message.reply_to_message.text is defined %} {{
                  trigger.json.message.reply_to_message.text }} {% endif %} {%
                  if trigger.json.message.reply_to_message.caption is defined %}
                  {{ trigger.json.message.reply_to_message.caption }} {% endif
                  %} {% endif %}

                  {% if trigger.json.message.caption is defined %} {{
                  trigger.json.message.caption }} {% endif %}

                  (Phân tích nội dung trong tệp, xác định chính xác yêu cầu của
                  người dùng, sau đó thực hiện theo yêu cầu và đưa ra phản hồi
                  rõ ràng, đầy đủ)
                file_path: "{{ file.file_path if file.file_path is defined }}"
                mime_type: "{{ file.mime_type if file.mime_type is defined }}"
              supported: "{{ file.supported if file.supported is defined }}"
        alias: Process photo
      - conditions:
          - condition: template
            value_template: "{{ trigger.json.message.video is defined }}"
        sequence:
          - action: pyscript.telegram_media_handle_tool
            data:
              file_id: "{{ trigger.json.message.video.file_id }}"
            response_variable: file
          - variables:
              input:
                prompt: >-
                  {% if trigger.json.message.reply_to_message is defined %} {%
                  if trigger.json.message.reply_to_message.text is defined %} {{
                  trigger.json.message.reply_to_message.text }} {% endif %} {%
                  if trigger.json.message.reply_to_message.caption is defined %}
                  {{ trigger.json.message.reply_to_message.caption }} {% endif
                  %} {% endif %}

                  {% if trigger.json.message.caption is defined %} {{
                  trigger.json.message.caption }} {% endif %}

                  (Phân tích nội dung trong tệp, xác định chính xác yêu cầu của
                  người dùng, sau đó thực hiện theo yêu cầu và đưa ra phản hồi
                  rõ ràng, đầy đủ)
                file_path: "{{ file.file_path if file.file_path is defined }}"
                mime_type: "{{ file.mime_type if file.mime_type is defined }}"
              supported: "{{ file.supported if file.supported is defined }}"
        alias: Process video
      - conditions:
          - condition: template
            value_template: "{{ trigger.json.message.video_note is defined }}"
        sequence:
          - action: pyscript.telegram_media_handle_tool
            data:
              file_id: "{{ trigger.json.message.video_note.file_id }}"
            response_variable: file
          - variables:
              input:
                prompt: >-
                  {% if trigger.json.message.reply_to_message is defined %} {%
                  if trigger.json.message.reply_to_message.text is defined %} {{
                  trigger.json.message.reply_to_message.text }} {% endif %} {%
                  if trigger.json.message.reply_to_message.caption is defined %}
                  {{ trigger.json.message.reply_to_message.caption }} {% endif
                  %} {% endif %}

                  {% if trigger.json.message.caption is defined %} {{
                  trigger.json.message.caption }} {% endif %}

                  (Phân tích nội dung trong tệp, xác định chính xác yêu cầu của
                  người dùng, sau đó thực hiện theo yêu cầu và đưa ra phản hồi
                  rõ ràng, đầy đủ)
                file_path: "{{ file.file_path if file.file_path is defined }}"
                mime_type: "{{ file.mime_type if file.mime_type is defined }}"
              supported: "{{ file.supported if file.supported is defined }}"
        alias: Process video note
      - conditions:
          - condition: template
            value_template: "{{ trigger.json.message.voice is defined }}"
        sequence:
          - action: pyscript.telegram_media_handle_tool
            data:
              file_id: "{{ trigger.json.message.voice.file_id }}"
            response_variable: file
          - variables:
              input:
                prompt: >-
                  {% if trigger.json.message.reply_to_message is defined %} {%
                  if trigger.json.message.reply_to_message.text is defined %} {{
                  trigger.json.message.reply_to_message.text }} {% endif %} {%
                  if trigger.json.message.reply_to_message.caption is defined %}
                  {{ trigger.json.message.reply_to_message.caption }} {% endif
                  %} {% endif %}

                  {% if trigger.json.message.caption is defined %} {{
                  trigger.json.message.caption }} {% endif %}

                  (Phân tích nội dung trong tệp, xác định chính xác yêu cầu của
                  người dùng, sau đó thực hiện theo yêu cầu và đưa ra phản hồi
                  rõ ràng, đầy đủ)
                file_path: "{{ file.file_path if file.file_path is defined }}"
                mime_type: "{{ file.mime_type if file.mime_type is defined }}"
              supported: "{{ file.supported if file.supported is defined }}"
        alias: Process voice
      - conditions:
          - condition: template
            value_template: "{{ trigger.json.message.audio is defined }}"
        sequence:
          - action: pyscript.telegram_media_handle_tool
            data:
              file_id: "{{ trigger.json.message.audio.file_id }}"
            response_variable: file
          - variables:
              input:
                prompt: >-
                  {% if trigger.json.message.reply_to_message is defined %} {%
                  if trigger.json.message.reply_to_message.text is defined %} {{
                  trigger.json.message.reply_to_message.text }} {% endif %} {%
                  if trigger.json.message.reply_to_message.caption is defined %}
                  {{ trigger.json.message.reply_to_message.caption }} {% endif
                  %} {% endif %}

                  {% if trigger.json.message.caption is defined %} {{
                  trigger.json.message.caption }} {% endif %}

                  (Phân tích nội dung trong tệp, xác định chính xác yêu cầu của
                  người dùng, sau đó thực hiện theo yêu cầu và đưa ra phản hồi
                  rõ ràng, đầy đủ)
                file_path: "{{ file.file_path if file.file_path is defined }}"
                mime_type: "{{ file.mime_type if file.mime_type is defined }}"
              supported: "{{ file.supported if file.supported is defined }}"
        alias: Process audio
      - conditions:
          - condition: template
            value_template: "{{ trigger.json.message.document is defined }}"
        sequence:
          - action: pyscript.telegram_media_handle_tool
            data:
              file_id: "{{ trigger.json.message.document.file_id }}"
            response_variable: file
          - variables:
              input:
                prompt: >-
                  {% if trigger.json.message.reply_to_message is defined %} {%
                  if trigger.json.message.reply_to_message.text is defined %} {{
                  trigger.json.message.reply_to_message.text }} {% endif %} {%
                  if trigger.json.message.reply_to_message.caption is defined %}
                  {{ trigger.json.message.reply_to_message.caption }} {% endif
                  %} {% endif %}

                  {% if trigger.json.message.caption is defined %} {{
                  trigger.json.message.caption }} {% endif %}

                  (Phân tích nội dung trong tệp, xác định chính xác yêu cầu của
                  người dùng, sau đó thực hiện theo yêu cầu và đưa ra phản hồi
                  rõ ràng, đầy đủ)
                file_path: "{{ file.file_path if file.file_path is defined }}"
                mime_type: "{{ file.mime_type if file.mime_type is defined }}"
              supported: "{{ file.supported if file.supported is defined }}"
        alias: Process document
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ supported is defined and not bool(supported) }}"
        sequence:
          - action: pyscript.telegram_message_handle_tool
            metadata: {}
            data:
              chat_id: "{{ trigger.json.message.chat.id }}"
              message: >-
                Trình xử lý hiện tại không hỗ trợ loại tệp này, vì vậy tệp chỉ
                được lưu trữ mà không qua bất kỳ phân tích nào thêm.
              reply_to_message_id: "{{ trigger.json.message.message_id }}"
            response_variable: telegram_response
      - conditions:
          - condition: template
            value_template: "{{ input is defined }}"
        sequence:
          - action: conversation.process
            metadata: {}
            data:
              agent_id: !input agent_id
              conversation_id: "{{ conversation_id }}"
              text: "{{ input }}"
            response_variable: result
          - variables:
              response: >-
                {{ result.response.speech.plain.speech if (result is defined and
                result.response is defined and result.response.response_type ==
                'action_done' and result.response.speech.plain.speech | length >
                0) else 'Something went wrong' }}
          - action: pyscript.conversation_id_setter
            metadata: {}
            data:
              conversation_id: "{{ result.conversation_id }}"
              chat_id: "{{ chat_id }}"
          - action: pyscript.telegram_message_handle_tool
            metadata: {}
            data:
              chat_id: "{{ trigger.json.message.chat.id }}"
              message: "{{ response }}"
              reply_to_message_id: "{{ trigger.json.message.message_id }}"
            response_variable: telegram_response
    default:
      - action: pyscript.telegram_message_handle_tool
        metadata: {}
        data:
          chat_id: "{{ trigger.json.message.chat.id }}"
          message: Trình xử lý hiện tại không hỗ trợ loại tin nhắn này.
          reply_to_message_id: "{{ trigger.json.message.message_id }}"
        response_variable: telegram_response
