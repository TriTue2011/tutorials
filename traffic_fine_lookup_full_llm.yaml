blueprint:
  name: Voice - Check Traffic Fine
  author: VuLQ
  description: >-
    # Tool for checking traffic fines using LLM

    ## Blueprint Setup

    ### Required

    * The Pyscript integration needs to be installed from HACS.

    * The `traffic_fine_lookup_tool.py` script needs to be copied into the `config/pyscript` folder.

    * The `requirements.txt` file needs to be copied into the `config/pyscript` folder.

    * Redis needs to be installed and configured, as it's required for data caching.

    * A Gemini API key needs to be configured in `config/configuration.yaml`, as it's required for solving CAPTCHAs.

    ```

    #File configuration.yaml

    pyscript:
      allow_all_imports: true
      hass_is_global: true
      gemini_api_key: !secret gemini_api_key
      redis_host: localhost     # If you're using the Home Assistant Addon, it should be the addon's hostname: xxxxxxxx-redis
      redis_port: 6379      # Default: 6379

    ```

    ```

    #File secrets.yaml

    gemini_api_key: XXXXXX      # Retrieve the key from the Google Cloud Console.

    ```

    ### Optional

    * Adjust the prompts for each field used in the script. The descriptions guide the LLM to provide the correct input.

    ### Note

    * Provide a concise and precise description for the script. This description will enable the LLM to recognize that the script is designed to directly lookup traffic fines from Cổng thông tin điện tử Cục Cảnh sát giao thông (https://www.csgt.vn/).

    * Make sure to expose the script to Assist after the script has been saved.

    * Do not alter the default script name.
  domain: script
  homeassistant:
    min_version: 2024.10.0
  input:
    prompt_settings:
      name: Prompt settings for the LLM
      icon: mdi:robot
      description: You can use these settings to finetune the prompts for your specific LLM (model). In most cases the defaults should be fine.
      collapsed: true
      input:
        license_plate_prompt:
          name: License Plate Prompt
          description: The prompt which will be used for the LLM can provide the license plate number of vehicle for the query.
          selector:
            text:
              multiline: true
          default: >-
            This argument is mandatory and must always be provided.

            Provide the vehicle's license plate number to check for any traffic fines.

            A license plate number consists of a continuous sequence of alphanumeric characters with no spaces.

            If a license plate contains errors caused by user mispronunciation, correct it to the most likely accurate license plate number.
        vehicle_type_prompt:
          name: Vehicle Type Prompt
          description: The prompt which will be used for the LLM can provide the type of vehicle for the query.
          selector:
            text:
              multiline: true
          default: >-
            This argument is mandatory and must always be provided.

            Provide the type of vehicle to check for any traffic fines.

            It must be one of the following three values: '1' for a car, '2' for a motorbike, or '3' for an electric bicycle.
mode: parallel
max_exceeded: silent
fields:
  license_plate:
    name: License Plate
    description: !input license_plate_prompt
    selector:
      text:
    required: true
  vehicle_type:
    name: Vehicle Type
    description: !input vehicle_type_prompt
    selector:
      select:
        options:
          - label: Car
            value: "1"
          - label: Motorbike
            value: "2"
          - label: Electric Bicycle
            value: "3"
    required: true
    default: "1"
sequence:
  - variables:
      version: 20250825
      license_plate: "{{ license_plate | default('') | trim }}"
      vehicle_type: "{{ vehicle_type | default('') | trim }}"
  - alias: Check if variables were set correctly
    if:
      - condition: template
        value_template: "{{ not (license_plate and vehicle_type) }}"
    then:
      - alias: Set variable for error message
        variables:
          response:
            error: Unable to check traffic fines because either the license plate number or the vehicle type is empty.
      - alias: Stop the script
        stop: Unable to check traffic fines because either the license plate number or the vehicle type is empty.
        response_variable: response
  - action: pyscript.traffic_fine_lookup_tool
    response_variable: response
    data:
      license_plate: "{{ license_plate }}"
      vehicle_type: "{{ vehicle_type }}"
  - stop: ""
    response_variable: response
