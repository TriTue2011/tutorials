blueprint:
  name: Zalo Bot Webhook
  author: luuquangvu
  description: >-
    # A Zalo bot enabling seamless two-way communication with Home Assistant.

    ## Blueprint Setup

    ### Required

    * Create a Zalo bot if it does not already exist using OA Zalo Bot Manager.

    * The Pyscript integration needs to be installed through HACS and properly configured.

    * The `scripts/zalo_bot_handle_tool.py` and `scripts/common_utilities.py` scripts need to be copied into the `config/pyscript` folder.

    * The `scripts/requirements.txt` file needs to be copied into the `config/pyscript` folder.

    * The mentioned file(s) is/are included in the repository.

    * Enable two Pyscript configuration options in `config/configuration.yaml` to permit the import of any Python package and to expose hass as a variable.

    * A Zalo bot token needs to be configured in `config/configuration.yaml` and `config/secrets.yaml`.

    ```

    #File configuration.yaml

    pyscript:
      allow_all_imports: true
      hass_is_global: true
      zalo_bot_token: !secret zalo_bot_token

    ```

    ```

    #File secrets.yaml

    zalo_bot_token: XXXXXX      # Retrieve the token from the OA Zalo Bot Manager.

    ```

    * Use the `pyscript.get_zalo_updates` action to retrieve chat IDs then use the `pyscript.set_zalo_webhook` action to generate a Webhook ID.

    ### Note

    * The `file_content_analyzer_full_llm.yaml` blueprint must be installed to analyze and extract various types of information from media and document files.

    ### Optional

    * Use the `pyscript.get_zalo_bot_info` action to retrieve Zalo bot basic information.

    * Use the `pyscript.get_zalo_updates` action to retrieve chat IDs and user IDs.

    * Use the `pyscript.set_zalo_webhook` action to easily configure a Zalo Webhook ID automatically.

    * Use the `pyscript.get_zalo_webhook` action to check the current Zalo Webhook ID.

    * Use the `pyscript.delete_zalo_webhook` action to delete the Zalo Webhook ID when you are no longer using it.

    * Use the `pyscript.send_zalo_message` action to easily send a message directly to Zalo in your automation without any dependencies.

    * Use the `pyscript.send_zalo_photo` action to easily send a photo directly to Zalo in your automation without any dependencies.
  domain: automation
  homeassistant:
    min_version: 2025.8.0
  input:
    webhook_settings:
      name: Settings for Webhook
      icon: mdi:webhook
      description: These settings allow you to set up the Webhook ID for receiving Zalo messages.
      input:
        webhook_id:
          name: Webhook ID
          description: Enter the preferred Webhook ID. Use the `pyscript.set_zalo_webhook` action to generate one automatically.
          selector:
            text:
    zalo_settings:
      name: Settings for Zalo
      icon: mdi:alpha-z-circle-outline
      description: These settings allow you to set up the Zalo Chat IDs and optionally restrict specific user IDs within group chat IDs.
      input:
        chat_ids:
          name: Chat IDs
          description: Specified chat IDs enable communication with the Zalo bot. Use the `pyscript.get_zalo_updates` action to retrieve chat IDs.
          selector:
            text:
              multiple: true
        user_ids:
          name: User IDs
          description: You can optionally restrict specific user IDs within group chat IDs to enable communication with the Zalo bot. If left empty, by default, all users in the selected group chat IDs are allowed.
          selector:
            text:
              multiple: true
          default:
    agent_settings:
      name: Settings for Conversation Agent
      icon: mdi:robot-outline
      description: These settings allow you to set up the conversation agent responsible for managing messages.
      input:
        agent_id:
          name: Conversation Agent
          description: It should be the same conversational agent found under the Voice Assistants - Assist settings.
          selector:
            entity:
              filter:
                domain: conversation
        language:
          name: Language
          description: The language code used to communicate with a conversation agent follows the IETF language tag standard, such as en-US.
          selector:
            text:
          default: vi-VN
mode: queued
max: 30
max_exceeded: silent
variables:
  version: 20251020
  chat_ids: !input chat_ids
  user_ids: !input user_ids
  language: !input language
alias: Zalo bot webhook
description: ""
triggers:
  - trigger: webhook
    allowed_methods:
      - POST
    local_only: false
    webhook_id: !input webhook_id
conditions:
  - condition: template
    value_template: >-
      {{ trigger.json is defined and trigger.json.message is defined }}
  - condition: template
    value_template: >-
      {{ (trigger.json.message.chat.id | string) in chat_ids }}
  - condition: template
    value_template: >-
      {% if user_ids is list -%}
        {% if (trigger.json.message.from.id | string) in user_ids -%}
        {{ true }}
        {% else -%}
        {{ false }}
        {% endif -%}
      {% else -%}
      {{ true }}
      {% endif -%}
actions:
  - variables:
      chat_id: >-
        {{ ('id_' ~ trigger.json.message.chat.id ~ '_' ~ trigger.json.message.from.id) | slugify }}
  - action: pyscript.memory_cache_get
    data:
      key: "{{ chat_id }}"
    response_variable: get_chat
  - variables:
      conversation_id: >-
        {{ get_chat.value if (get_chat.status == 'ok' and get_chat.value | default('', true) | length > 0) }}
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.json.event_name == 'message.text.received' }}"
        sequence:
          - variables:
              input:
                system: >-
                  Always respond in the user's language: {{ language | trim }}.
                prompt: >-
                  {{ trigger.json.message.text }}
                zalo_chat_id: "{{ trigger.json.message.chat.id }}"
        alias: Process text
      - conditions:
          - condition: template
            value_template: "{{ trigger.json.event_name == 'message.image.received' }}"
        sequence:
          - action: pyscript.get_zalo_file
            data:
              url: "{{ trigger.json.message.photo_url }}"
            response_variable: file
          - variables:
              input:
                system: >-
                  Always use the *File Content Analyzer* to analyze file content and identify the user's request.

                  If the prompt is empty, always treat any instruction or question within the file (via transcription/OCR) as the user's request and execute it directly.

                  Only when no instruction or question exists in the file, return a concise summary of its content.

                  Never ask the user for confirmation. Use any other tools as needed, and provide a clear, complete response.

                  Always respond in the user's language: {{ language | trim }}.
                prompt: >-
                  {{ trigger.json.message.caption }}
                file_path: "{{ file.file_path if file.file_path is defined }}"
                mime_type: "{{ file.mime_type if file.mime_type is defined }}"
                zalo_chat_id: "{{ trigger.json.message.chat.id }}"
              supported: "{{ file.supported if file.supported is defined }}"
        alias: Process photo
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ supported is defined and not bool(supported) }}"
        sequence:
          - action: pyscript.send_zalo_message
            data:
              chat_id: "{{ trigger.json.message.chat.id }}"
              message: This file type is not supported for analysis at the moment. The file has been stored without further processing.
            response_variable: zalo_response
      - conditions:
          - condition: template
            value_template: "{{ input is defined }}"
        sequence:
          - action: pyscript.send_zalo_chat_action
            data:
              chat_id: "{{ trigger.json.message.chat.id }}"
            response_variable: zalo_chat_action
          - if:
              - condition: template
                value_template: "{{ not conversation_id }}"
            then:
              - action: conversation.process
                data:
                  agent_id: !input agent_id
                  text: "{{ input }}"
                  language: "{{ language | trim }}"
                response_variable: result
            else:
              - action: conversation.process
                data:
                  agent_id: !input agent_id
                  text: "{{ input }}"
                  conversation_id: "{{ conversation_id }}"
                  language: "{{ language | trim }}"
                response_variable: result
          - variables:
              response: >-
                {{ result.response.speech.plain.speech if (result is defined and result.response is defined and result.response.speech is defined and result.response.speech.plain is defined and (result.response.speech.plain.speech | length) > 0) else 'No response from assistant' }}
          - action: pyscript.memory_cache_set
            data:
              value: "{{ result.conversation_id }}"
              key: "{{ chat_id }}"
            response_variable: set_chat
          - action: pyscript.send_zalo_message
            data:
              chat_id: "{{ trigger.json.message.chat.id }}"
              message: "{{ response | trim }}"
            response_variable: zalo_response
    default:
      - action: pyscript.send_zalo_message
        data:
          chat_id: "{{ trigger.json.message.chat.id }}"
          message: This type of message is not supported by the current handler.
        response_variable: zalo_response
