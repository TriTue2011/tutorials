blueprint:
  name: Custom Zalo Bot Webhook
  author: VuLQ
  description: >-
    # A Zalo bot enabling seamless two-way communication with Home Assistant.

    ## Blueprint Setup

    ### Required

    * The Zalo Bot integration should be installed through HACS and properly configured.

    * The Pyscript integration needs to be installed through HACS and properly configured.

    * The `scripts/zalo_custom_bot_handle_tool.py` and `scripts/common_utilities.py` scripts needs to be copied into the `config/pyscript` folder.

    * The `scripts/requirements.txt` file needs to be copied into the `config/pyscript` folder.

    * Update the Webhook URL to the Zalo Bot Server after saving the script.

    ```

    #File configuration.yaml

    pyscript:
      allow_all_imports: true
      hass_is_global: true

    ```

    ### Note

    * The `file_content_analyzer_full_llm.yaml` blueprint must be installed to analyze and extract various types of information from media and document files.

    ### Optional

    * Use the `pyscript.generate_webhook_id` action to easily generate a Webhook ID.
  domain: automation
  homeassistant:
    min_version: 2025.8.0
  input:
    webhook_settings:
      name: Settings for Webhook
      icon: mdi:webhook
      description: These settings allow you to set up the Webhook ID for receiving Zalo messages.
      input:
        webhook_id:
          name: Webhook ID
          description: Enter the preferred Webhook ID. Use the `pyscript.generate_webhook_id` action to generate a random one.
          selector:
            text:
    zalo_settings:
      name: Settings for Zalo
      icon: mdi:alpha-z-circle-outline
      description: These settings allow you to set up the Zalo bot account, thread IDs and optionally restrict specific user IDs within thread IDs.
      input:
        account_selection:
          name: Account Selection
          description: Specified phone number for the Zalo bot account.
          selector:
            text:
        thread_ids:
          name: Thread IDs
          description: Specified thread IDs enable communication with the Zalo bot.
          selector:
            text:
              multiple: true
        user_ids:
          name: User IDs
          description: You can optionally restrict specific user IDs within thread IDs to enable communication with the Zalo bot. If left empty, by default, all users in the selected thread IDs are allowed.
          selector:
            text:
              multiple: true
          default:
    agent_settings:
      name: Settings for Conversation Agent
      icon: mdi:robot-outline
      description: These settings allow you to set up the conversation agent responsible for managing messages.
      input:
        agent_id:
          name: Conversation Agent
          description: It should be the same conversational agent found under the Voice Assistants - Assist settings.
          selector:
            entity:
              filter:
                domain: conversation
        language:
          name: Language
          description: The language code used to communicate with a conversation agent follows the IETF language tag standard, such as en-US.
          selector:
            text:
          default: vi-VN
mode: queued
max: 30
max_exceeded: silent
variables:
  version: 20250829
  thread_ids: !input thread_ids
  user_ids: !input user_ids
  language: !input language
alias: Zalo bot webhook
description: ""
triggers:
  - trigger: webhook
    allowed_methods:
      - POST
    local_only: true
    webhook_id: !input webhook_id
conditions:
  - condition: template
    value_template: >-
      {{ trigger.json is defined }}
  - condition: template
    value_template: >-
      {{ (trigger.json.threadId | string) in thread_ids }}
  - condition: template
    value_template: >-
      {% if user_ids is list -%}
        {% if (trigger.json.data.uidFrom | string) in user_ids -%}
        {{ true }}
        {% else -%}
        {{ false }}
        {% endif -%}
      {% else -%}
      {{ true }}
      {% endif -%}
actions:
  - variables:
      chat_id: >-
        {{ ('id_' ~ trigger.json.threadId ~ '_' ~ trigger.json.data.uidFrom) | slugify }}
  - action: pyscript.conversation_id_fetcher
    data:
      chat_id: "{{ chat_id }}"
    response_variable: get_chat
  - variables:
      conversation_id: >-
        {{ get_chat.conversation_id if (get_chat.conversation_id | default('', true) | length > 0) }}
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.json.data.msgType == 'webchat' }}"
        sequence:
          - variables:
              input:
                system: >-
                  Always respond in the user's language: {{ language | trim }}.
                prompt: >-
                  {{ trigger.json.data.quote.msg if (trigger.json.data.quote is defined and trigger.json.data.quote.msg is defined) }}

                  {{ trigger.json.data.content }}
        alias: Process text
      - conditions:
          - condition: template
            value_template: "{{ trigger.json.data.msgType in ['chat.photo', 'chat.voice', 'chat.video.msg', 'share.file'] }}"
        sequence:
          - action: pyscript.get_zalo_file_custom_bot
            data:
              url: "{{ trigger.json.data.content.href }}"
            response_variable: file
          - variables:
              input:
                system: >-
                  Always use the *File Content Analyzer* to analyze file content and identify the user's request.

                  If the prompt is empty, always treat any instruction or question within the file (via transcription/OCR) as the user's request and execute it directly.

                  Only when no instruction or question exists in the file, return a concise summary of its content.

                  Never ask the user for confirmation. Use any other tools as needed, and provide a clear, complete response.

                  Always respond in the user's language: {{ language | trim }}.
                prompt: >-
                  {{ trigger.json.data.content.title }}
                file_path: "{{ file.file_path if file.file_path is defined }}"
                mime_type: "{{ file.mime_type if file.mime_type is defined }}"
              supported: "{{ file.supported if file.supported is defined }}"
        alias: Process all file types
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ supported is defined and not bool(supported) }}"
        sequence:
          - action: zalo_bot.send_message
            data:
              thread_id: "{{ trigger.json.threadId }}"
              message: This file type is not supported for analysis at the moment. The file has been stored without further processing.
              account_selection: !input account_selection
              type: "{{ trigger.json.type }}"
      - conditions:
          - condition: template
            value_template: "{{ input is defined }}"
        sequence:
          - action: zalo_bot.send_typing_event
            data:
              thread_id: "{{ trigger.json.threadId }}"
              account_selection: !input account_selection
          - if:
              - condition: template
                value_template: "{{ not conversation_id }}"
            then:
              - action: conversation.process
                data:
                  agent_id: !input agent_id
                  text: "{{ input }}"
                  language: "{{ language | trim }}"
                response_variable: result
            else:
              - action: conversation.process
                data:
                  agent_id: !input agent_id
                  text: "{{ input }}"
                  conversation_id: "{{ conversation_id }}"
                  language: "{{ language | trim }}"
                response_variable: result
          - variables:
              response: >-
                {{ result.response.speech.plain.speech if (result is defined and result.response is defined and result.response.speech is defined and result.response.speech.plain is defined and (result.response.speech.plain.speech | length) > 0) else 'No response from assistant' }}
          - action: pyscript.conversation_id_setter
            data:
              conversation_id: "{{ result.conversation_id }}"
              chat_id: "{{ chat_id }}"
            response_variable: set_chat
          - action: zalo_bot.send_message
            data:
              thread_id: "{{ trigger.json.threadId }}"
              message: "{{ response | trim }}"
              account_selection: !input account_selection
              type: "{{ trigger.json.type }}"
    default:
      - action: zalo_bot.send_message
        data:
          thread_id: "{{ trigger.json.threadId }}"
          message: This type of message is not supported by the current handler.
          account_selection: !input account_selection
          type: "{{ trigger.json.type }}"
